// ---------------------------------------------------------------------------
//  Filename: Msg_Prot.h
//  Created by: Nissim Avichail
//  Date:  01/07/15
//  Orisol (c)
// ---------------------------------------------------------------------------

#ifndef _MSG_PROT_H_
#define _MSG_PROT_H_

// #ifdef __cplusplus
// extern "C" {
// #endif
#include <ONS_General.h>
#include "RTC_Stitch.h"


#define		MSG_PROT_BASE_VERSION				0
#define		MSG_PROT_MAJOR_VERSION				1
#define		MSG_PROT_MINOR_VERSION				30

#define		DUMMY_DATA_SIZE						4
#define 	DUMMY_TEST_MESSAGE_MAX_SIZE 		64
#define 	DUMMY_TEST_MESSAGE_MIN_SIZE			20
#define 	MSG_PROT_GEN_MSG_MAX_DATA_SIZE      48      //Max Message size - header size


#define 	TEST_HOST_FILL_SIZE					32		// = general message data size - host test message header size

#define		TEST_RTC_FILL_SIZE					20		//general message data size - RTC test message header size

#define		MSG_PROT_RTC_STATUS_DEBUG_DATA_SIZE		24
#define		MSG_PROT_RTC_ERROR_DATA_SIZE			30

#define		MSG_PROT_RTC_DUMP_DATA_SIZE				 7
#define		MSG_PROT_RTC_DUMP_TYPE_LAST_MSG 		99

#define		MSG_PROT_MAX_IO_ACT_NUM					 6

#define		MSG_PROT_RTC_DEBUG_DATA_SIZE		    48

#define		MSG_PROT_PROFILE_MAX_DATA_SIZE			20

#define		MSG_PROT_MAX_NUM_OF_ENTITY_IN_LIST		 8
#define		MSG_PROT_MAX_NUM_OF_ID_IN_IO_LIST		 46

//-----------------------------------
// Message Identification definition
//-----------------------------------

#define			NO_MESSAGE_ID							0
#define			MSG_PROT_TEST_USB_HOST_TO_RTC			1
#define			MSG_PROT_TEST_USB_RTC_TO_HOST			2
#define         MSG_PROT_PING_PONG_MSG					3

#define			MSG_PROT_NEXT_STITCH_DATA    			10
#define			MSG_PROT_RTC_STATUS         			11
#define			MSG_PROT_RTC_RUN						12
#define			MSG_PROT_RTC_ERROR_MSG					13
#define			MSG_PROT_RTC_MOVE_X_Y					14

#define			MSG_PROT_HOME_MODE						15
#define			MSG_PORT_RTC_HOME_STATUS				16
#define			MSG_PROT_RTC_DUMP_TO_LOG                17
#define			MSG_PROT_DUMP_REQ						18

#define 		MSG_PROT_ACT_IO_CMD						20
#define 		MSG_PROT_REQ_ACT_IO_STATE				21
#define 		MSG_PROT_RTC_ACT_IO_STATE				22
#define			MSG_PROT_RTC_DEBUG_MSG					23
#define 		MSG_PROT_PERFORM_INIT_REQ		        24
#define			MSG_PROT_RTC_INIT_STATUS				25
#define			MSG_PROT_SH_LOCK_STATE					26
//#define			MSG_PROT_LOCK_SH_UP_POS					26
#define 		MSG_PROT_PROTOCOL_VALIDATION_REQ        27
#define			MSG_PROT_PROTOCOL_VALIDATION_STATUS		28
#define			MSG_PROT_MANUAL_CUT_REQ					29
#define			MSG_PROT_UPDATE_PROFILE_STATUS_MSG		30
#define			MSG_PROT_UPDATE_PROFILE_1_MSG			31
#define			MSG_PROT_UPDATE_PROFILE_2_MSG			32
#define			MSG_PROT_UPDATE_PROFILE_3_MSG			33
#define			MSG_PROT_UPDATE_PROFILE_4_MSG			34
#define			MSG_PROT_UPDATE_PROFILE_5_MSG			35
#define			MSG_PROT_UPDATE_PROFILE_6_MSG			36
#define			MSG_PROT_UPDATE_PROFILE_7_MSG			37
#define			MSG_PROT_UPDATE_PROFILE_8_MSG			38
#define			MSG_PROT_UPDATE_PROFILE_9_MSG			39
#define			MSG_PROT_UPDATE_PROFILE_10_MSG			40
#define			MSG_PROT_UPDATE_PROFILE_11_MSG			41
#define			MSG_PROT_UPDATE_PROFILE_12_MSG			42
#define			MSG_PROT_UPDATE_PROFILE_13_MSG			43
#define			MSG_PROT_UPDATE_PROFILE_14_MSG			44

#define			MSG_PROT_PROFILE_INFO_REQ				48
#define			MSG_PROT_PROFILE_INFO					49

#define			MSG_PROT_MACHINE_STATUS_REQUEST			50
#define			MSG_PROT_MACHINE_STATUS_REPLY			51
#define			MSG_PROT_APF_SET_POSITION_REQ			52
#define			MSG_PROT_QUICK_STOP_REQ					53
#define			MSG_PROT_UPDATE_DRY_RUN_DELAY_REQ		54
#define			MSG_PROT_LOCK_XY						55
#define			MSG_PROT_RTC_ALARM_MSG					56
#define			MSG_PROT_RESET_ALARM					57
#define			MSG_PROT_ENTITY_SET_VAL_CMD				58
#define			MSG_PROT_ENTITY_GET_STATE				59
#define			MSG_PROT_ENTITY_STATE_INFO				60
#define			MSG_PROT_SET_TENSION_REQ				61
#define			MSG_PROT_RTC_LOAD_XY_POS_REQ			62
#define			MSG_PROT_RTC_LOAD_XY_POS_RESPONSE		63
#define			MSG_PROT_SET_SERVO_CLAMP_CMD			64
#define			MSG_PROT_SET_RTC_CONFIG_CMD				65
#define			MSG_PROT_INIT_IO_LIST_CMD				66
#define			MSG_PROT_RTC_IO_LIST_VALUES				67
#define			MSG_PROT_IO_LIST_STATUS_REQUEST			68
#define			MSG_PROT_SET_LAMP_COMMAND				69
#define			MSG_PROT_ENABLE_ALARM_STATE_CMD			70	
//
#define			MSG_PROT_RTC_SET_RPM					71
#define			MSG_PROT_RTC_MOVE_X_Y_STC				72
#define			MSG_PROT_RTC_SET_IO_LATCH_MODE			73
#define			MSG_PROT_SEND_RTC_SPOOL_COUNTERS_CMD	74
#define			MSG_PROT_MACHINE_INFO_REQUEST			75
#define			MSG_PROT_MACHINE_INFO_REPLY				76
#define			MSG_PROT_BOBBIN_CHANGER_CMD             77

#define			MSG_PROT_LOCK_APF_CMD					78

#define			MSG_PROT_RTC_RESET_CMD					79
#define			MSG_PROT_ROTATE_SH_TO_DIRECTION_CMD		80
#define			MSG_PROT_DIAG_ACT_MODE					81
#define			MSG_PORT_RTC_DIAG_ACT_STATUS			82

#define			MSG_PROT_ENTITY_ONESHOT					83
#define			MSG_PROT_ENTITY_ONESHOT_FBK				84

#define			MSG_PROT_READ_CONFIGREG_CMD				101
#define			MSG_PROT_READ_CONFIGREG_FBK				102
#define			MSG_PROT_WRITE_CONFIGREG_CMD			103
#define			MSG_PROT_WRITE_CONFIGREG_FBK			104

#define			MSG_PROT_RESET_PIC_CMD					105
#define			MSG_PROT_RESET_PIC_FBK					106

#define			MSG_PROT_READ_SEGMENT_CHECKSUM_CMD		107
#define			MSG_PROT_READ_SEGMENT_CHECKSUM_FBK		108

//RTC State machine
//#define RTC_IN_READY_STATE			0
//#define RTC_IN_RUN_STATE			1
#define MSG_PROT_RTC_DEFAULT_STITCH_ID		(-1)

//Msg_Port Module Error Code Definition

#define MSG_PROT_SUCCESS					0
#define MSG_PROT_ERROR_GET_MESSAGE			1
#define MSG_PROT_ERROR_SIZE_MESSAGE			2
#define MSG_PROT_ERROR_CHECKSUM_MESSAGE   	3
#define MSG_PROT_UNKNOWN_STATE_ERROR        4
#define MSG_PROT_FULL_STC_BUFF_ERROR        5
#define MSG_PROT_UNKNOWN_EVENT_ERROR        6
#define MSG_PROT_RUN_ERROR                  7
#define MSG_PROT_SH_ERROR					8
#define MSG_PROT_PF_APF_ERROR               9
#define MSG_PROT_SERVO_CLAMP_ERROR          10

//Msg_Port Module Error Code Definition

//Mask for Profile update parameters

#define ONS_PROFILE_ZS_SEW_DIRECTION_MASK							0x1
#define ONS_PROFILE_ZS_LOCK_DELAY_MASK								0x2
#define ONS_PROFILE_ZS_DIRCTION_CHANGE_DELAY_MASK					0x4
#define ONS_PROFILE_ZS_DEFAULT_UPDATE_DATA_POSITION_MASK			0x8
#define ONS_PROFILE_ZS_DEFAULT_STOP_POSITION_MASK					0x10
#define ONS_PROFILE_ZS_STOP_BY_STEP_COUNTER_MASK					0x20
#define ONS_PROFILE_ZS_VALID_POS_OFFSET_FACTOR_MASK					0x40
#define ONS_PROFILE_ZS_LOCK_POLARITY_MASK							0x80

#define ONS_PROFILE_XYS_X_POSITIVE_DIR_MASK							0X1
#define ONS_PROFILE_XYS_Y_POSITIVE_DIR_MASK							0x2
#define ONS_PROFILE_XYS_INIT_X_POSITION_MASK						0x4
#define ONS_PROFILE_XYS_INIT_Y_POSITION_MASK						0x8
#define ONS_PROFILE_XYS_LOCK_DELAY_MASK								0x10
#define ONS_PROFILE_XYS_DIRECTION_CHANGE_DELAY_MASK					0x20
#define ONS_PROFILE_TB_EXIST_MASK									0x40
#define ONS_PROFILE_TB_SENSOR_ID_MASK								0x80
#define ONS_PROFILE_TB_SENSOR_ON_MASK								0x100
#define ONS_PROFILE_TB_RESET_IO_MASK								0x200
#define ONS_PROFILE_TB_RESET_CMD_MASK								0x400
#define ONS_PROFILE_TB_START_THRESHOLD_MASK							0x800
#define ONS_PROFILE_TB_RUN_THRESHOLD_MASK							0x1000
#define ONS_PROFILE_XYS_LOCK_POLARITY_MASK							0x2000
#define ONS_PROFILE_XYS_SLOW_DOWN_ENABLE_MASK						0x4000
#define ONS_PROFILE_XYS_SLOW_DOWN_DT_LIMIT_MASK						0x8000

#define ONS_PROFILE_XY_JUMP_MAX_XY_SPEED_MASK						0x1
#define ONS_PROFILE_XY_JUMP_MAX_XY_ACCEL_MASK						0x2
#define ONS_PROFILE_XY_JUMP_MAX_DT_VALUE_MASK						0x4
#define ONS_PROFILE_XY_JUMP_ISR_TIME_MASK							0x8
#define ONS_PROFILE_XY_JUMP_ISR_TIME_NO_CALC_MASK					0x10
#define ONS_PROFILE_XY_JUMP_XY_STEP_MASK							0x20
#define ONS_PROFILE_CUT_REV_STEP_RPM_MASK							0x40
#define ONS_PROFILE_CUT_PREPARE_CUT_POSITION_MASK					0x80
#define ONS_PROFILE_CUT_CUTTER_OFF_POS_MASK							0x100
#define ONS_PROFILE_CUT_REVERSE_END_POS_MASK						0x200				
#define ONS_PROFILE_CUT_CUTTER_ON_TT_LEVEL_MASK						0x400			
#define ONS_PROFILE_CUT_CUTTER_OFF_TT_LEVEL_MASK					0x800			
#define ONS_PROFILE_CUT_STOPPING_TIME_MASK							0x1000
#define ONS_PROFILE_CUT_MANUAL_CUT_RPM_MASK							0x2000
#define ONS_PROFILE_CUT_CUTTER_OFF_STEP_POS_MASK					0x4000
#define ONS_PROFILE_CUT_CUTTER_OFF_STEP_POS_MAX_MASK				0x8000

#define ONS_PROFILE_HOME_Z_HOME_RPM_MASK							0x1 					
#define ONS_PROFILE_HOME_Z_HOME_DIST_MASK							0x2				
#define ONS_PROFILE_HOME_XY_TYPE_MASK								0x4					
#define ONS_PROFILE_HOME_XY_HOME1_X_MOVE_MASK						0x8			
#define ONS_PROFILE_HOME_XY_HOME1_Y_MOVE_MASK						0x10 			
#define ONS_PROFILE_HOME_XY_HOME1_SPEED_MASK						0x20				
#define ONS_PROFILE_HOME_XY_HOME2_SPEED_MASK						0x40				
#define ONS_PROFILE_HOME_XY_HOME2_X_SHIFT_MASK						0x80			
#define ONS_PROFILE_HOME_XY_HOME2_Y_SHIFT_MASK						0x100			
#define ONS_PROFILE_HOME_XY_HOME2_X_MOVE_MASK						0x200			
#define ONS_PROFILE_HOME_XY_HOME2_Y_MOVE_MASK						0x400			
#define ONS_PROFILE_HOME_X_COORDINATE_MASK							0x800				
#define ONS_PROFILE_HOME_Y_COORDINATE_MASK							0x1000				
#define ONS_PROFILE_HOME_XY_HOME_MOVE_TIMEOUT_MASK					0x2000

#define ONS_PROFILE_RTC_CTRL_STATUS_MSG_DELAY_MASK					0x1 				
#define ONS_PROFILE_RTC_CTRL_RUN_STATE_STOPING_MODE_TIMEOUT_MASK	0x2	
#define ONS_PROFILE_RTC_CTRL_SH_UP_SPEED_MASK						0x4	
#define ONS_PROFILE_RTC_CTRL_SH_UP_STOP_ANGLE_MASK					0x8	
#define ONS_PROFILE_RTC_CTRL_TB_NUM_OF_STITCHES_IN_START_TIME_MASK	0x10
#define ONS_PROFILE_RTC_CTRL_DR_STP_DT_VX_MASK						0x20
#define ONS_PROFILE_RTC_CTRL_DR_STP_DT_VY_MASK						0x40
#define ONS_PROFILE_RTC_CTRL_QUICK_STOP_RPM_MASK					0x80
#define ONS_PROFILE_RTC_CTRL_RPM_LIMIT_FOR_QUICK_STOP_MASK			0x100
#define ONS_PROFILE_RTC_CTRL_STOP_RPM_MASK							0x200
#define ONS_PROFILE_RTC_CTRL_STOP_POS_NO_CUT_MASK					0x400	
#define ONS_PROFILE_RTC_CTRL_STOP_POS_NDL_DOWN_MASK					0x800	
#define ONS_PROFILE_RTC_CTRL_STOP_POS_NDL_UP_MASK					0x1000	
#define ONS_PROFILE_APF_CTRL_PF_ENABLE_MASK							0x2000
#define ONS_PROFILE_APF_CTRL_APF_ENABLE_MASK						0x4000
#define	ONS_PROFILE_APF_CTRL_APF_MOVE_DT_MASK						0x8000

#define ONS_PROFILE_RTC_CTRL_STOP_POS_NO_CUT_STEP_MASK				0x1
#define ONS_PROFILE_RTC_CTRL_STOP_POS_NO_CUT_STEP_MAX_MASK			0x2
#define ONS_PROFILE_RTC_CTRL_STOP_POS_NDL_DOWN_STEP_MASK			0x4
#define ONS_PROFILE_RTC_CTRL_STOP_POS_NDL_DOWN_STEP_MAX_MASK		0x8
#define ONS_PROFILE_RTC_CTRL_STOP_POS_NDL_UP_STEP_MASK				0x10
#define ONS_PROFILE_RTC_CTRL_STOP_POS_NDL_UP_STEP_MAX_MASK			0x20
#define ONS_PROFILE_HOME_APF_HOME_DISTANCE_MASK						0x40		
#define ONS_PROFILE_HOME_APF_HOME_POSITION_MASK						0x80
#define ONS_PROFILE_HOME_APF_HOME_SENSOR_LOGIC_MASK					0x100
#define ONS_PROFILE_HOME_APF_HOME_DT_MASK							0x200
#define ONS_PROFILE_HOME_APF_HOME_MOVE_TIMEOUT_MASK					0x400
#define ONS_PROFILE_RTC_CTRL_SERVO_CLAMP_ENABLE_MASK				0x800
#define ONS_PROFILE_HOME_APF_PRE_HOME_DISTANCE_MASK					0x1000
#define ONS_PROFILE_HOME_APF_HOME_OUT_OF_SENSOR_DISTANCE_MASK		0x2000
#define ONS_PROFILE_RTC_CTRL_DR_APF_UP_DELAY_MASK					0x4000
#define ONS_PROFILE_RTC_CTRL_DR_APF_DN_DELAY_MASK					0x8000

#define ONS_PROFILE_APF_SERVO_ACCEL_TABLE_0_MASK					0x1
#define ONS_PROFILE_APF_SERVO_ACCEL_TABLE_1_MASK					0x2
#define ONS_PROFILE_APF_SERVO_ACCEL_TABLE_2_MASK					0x4
#define ONS_PROFILE_APF_SERVO_ACCEL_TABLE_3_MASK					0x8
#define ONS_PROFILE_APF_SERVO_ACCEL_TABLE_4_MASK					0x10
#define ONS_PROFILE_APF_SERVO_ACCEL_TABLE_5_MASK					0x20
#define ONS_PROFILE_APF_SERVO_ACCEL_TABLE_6_MASK					0x40
#define ONS_PROFILE_APF_SERVO_ACCEL_TABLE_7_MASK					0x80
#define ONS_PROFILE_APF_SERVO_ACCEL_TABLE_8_MASK					0x100
#define ONS_PROFILE_APF_SERVO_ACCEL_TABLE_9_MASK					0x200	
#define ONS_PROFILE_PFS_CHECK_LOST_POSITION_MASK					0x400	
#define ONS_PROFILE_PFS_CHECK_POSITION_OFFSET_MASK					0x800	
#define ONS_PROFILE_PFS_CHECK_POSITION_REPEAT_MASK					0x1000
#define ONS_PROFILE_UT_WELDER_TIMEOUT_MASK							0x2000

//profile 8
#define ONS_PROFILE_LAMPS_LAMP_ENABLE_MASK											0x1
#define ONS_PROFILE_LAMPS_LAMP_BLINK_FAST_ON_TIME_MASK								0x2
#define ONS_PROFILE_LAMPS_LAMP_BLINK_FAST_OFF_TIME_MASK								0x4
#define ONS_PROFILE_LAMPS_LAMP_BLINK_MID_ON_TIME_MASK								0x8
#define ONS_PROFILE_LAMPS_LAMP_BLINK_MID_OFF_TIME_MASK								0x10
#define ONS_PROFILE_LAMPS_LAMP_BLINK_SLOW_ON_TIME_MASK								0x20
#define ONS_PROFILE_LAMPS_LAMP_BLINK_SLOW_OFF_TIME_MASK								0x40
#define ONS_PROFILE_SPOOL_COUNTERS_BOBBIN_COUNTER_TIME_PERIOD_TO_CHECK_MASK		0x80		
#define ONS_PROFILE_SPOOL_COUNTERS_BOBBIN_COUNTER_MAXIMAL_CHANGE_FOR_STOP_MASK		0x100	
#define ONS_PROFILE_SPOOL_COUNTERS_WINDER_COUNTER_TIME_PERIOD_TO_CHECK_MASK         0x200		
#define ONS_PROFILE_SPOOL_COUNTERS_WINDER_COUNTER_MINIMAL_CHANGE_FOR_RUN_MASK		0x400		
#define ONS_PROFILE_SPOOL_COUNTERS_WINDER_COUNTER_MAXIMAL_CHANGE_FOR_STOP_MASK		0x800		
#define ONS_PROFILE_SPOOL_COUNTERS_THREAD_COUNTER_TIME_PERIOD_TO_CHECK_MASK         0x1000		
#define ONS_PROFILE_SPOOL_COUNTERS_THREAD_COUNTER_MAXIMAL_CHANGE_FOR_STOP_MASK		0x2000		
#define ONS_PROFILE_SENSOR_ENABLE_UT_WELDER_UP_SENSOR_MASK							0x4000
#define ONS_PROFILE_SENSOR_ENABLE_UT_WELDER_DOWN_SENSOR_MASK						0x8000


//profile 9
#define ONS_PROFILE_TENSION_PWM_DIVIDER_FACTOR_MASK					0x1
#define ONS_PROFILE_TENSION_PWM_PERIOD_IN_USEC_MASK					0x2
#define ONS_PROFILE_TENSION_MAX_ED_PERCENTAGE_MASK					0x4
#define ONS_PROFILE_TENSION_MIN_ED_PERCENTAGE_MASK					0x8
#define ONS_PROFILE_TENSION_TRANSITION_TENSION_MASK					0x10
#define ONS_PROFILE_TENSION_IDLE_TENSION_MASK						0x20
#define ONS_PROFILE_TENSION_TRANSITION_DELAY_MASK					0x40
#define ONS_PROFILE_TENSION_IDLE_TIMEOUT_MASK   					0x80			
#define ONS_PROFILE_TENSION_THREAD_TENSION_EXIST_MASK				0x100
#define ONS_PROFILE_RTC_CTRL_BOBBIN_COUNTER_EXIST_MASK				0x200
#define ONS_PROFILE_RTC_CTRL_WINDER_COUNTER_EXIST_MASK				0x400
#define ONS_PROFILE_RTC_CTRL_THREAD_COUNTER_EXIST_MASK				0x800
#define ONS_PROFILE_TENSION_MIN_TRANSITION_DELAY_MASK				0x1000

//#define ONS_PROFILE_APF_SERVO_ACCEL_TABLE_45_MASK					0x2000
//#define ONS_PROFILE_APF_SERVO_ACCEL_TABLE_46_MASK					0x4000
//#define ONS_PROFILE_APF_SERVO_ACCEL_TABLE_47_MASK					0x8000

//#define ONS_PROFILE_APF_SERVO_ACCEL_TABLE_48_MASK					0x1
//#define ONS_PROFILE_APF_SERVO_ACCEL_TABLE_49_MASK					0x2
#define ONS_PROFILE_APF_SERVO_DEFAULT_STATE_MASK					0x4
#define ONS_PROFILE_APF_SERVO_PFS_POSITIVE_DIR_MASK					0x8
#define ONS_PROFILE_APF_SERVO_INIT_PFS_POSITION_MASK				0x10
#define ONS_PROFILE_APF_SERVO_LOCK_DELAY_MASK						0x20
#define ONS_PROFILE_APF_SERVO_DIRECTION_CHANGE_DELAY_MASK			0x40
#define ONS_PROFILE_APF_SERVO_TIMER_INPUT_PRESCALE_MASK				0x80
#define ONS_PROFILE_APF_SERVO_MIN_DT_VALUE_MASK 					0x100
#define ONS_PROFILE_APF_SERVO_MAX_DT_VALUE_MASK						0x200	
#define ONS_PROFILE_APF_SERVO_ISR_TIME_MASK							0x400	
#define ONS_PROFILE_APF_SERVO_ACCEL_STEP_MASK						0x800	
#define ONS_PROFILE_APF_SERVO_STEPS_REPEAT_MASK						0x1000	
#define ONS_PROFILE_APF_LOCK_POLARITY_MASK							0x2000	
#define ONS_PROFILE_CUT_WIPER_EXIST_MASK							0x4000	

#define ONS_PROFILE_OPX_PORT_IO_PORT_1_MASK							0x1
#define ONS_PROFILE_OPX_PORT_IO_PORT_2_MASK							0x2
#define ONS_PROFILE_OPX_PORT_IO_PORT_3_MASK							0x4
#define ONS_PROFILE_OPX_PORT_IO_PORT_4_MASK							0x8
#define ONS_PROFILE_OPX_PORT_IO_PORT_5_MASK							0x10
#define ONS_PROFILE_OPX_PORT_IO_PORT_6_MASK							0x20
#define ONS_PROFILE_OPX_PORT_IO_PORT_7_MASK							0x40
#define ONS_PROFILE_OPX_PORT_IO_PORT_8_MASK							0x80
#define ONS_PROFILE_OPX_PORT_IO_PORT_9_MASK							0x100
#define ONS_PROFILE_OPX_PORT_IO_PORT_10_MASK						0x200
#define ONS_PROFILE_OPX_PORT_IO_PORT_11_MASK						0x400
#define ONS_PROFILE_OPX_PORT_IO_PORT_12_MASK						0x800
#define ONS_PROFILE_OPX_PORT_IO_PORT_13_MASK						0x1000
#define ONS_PROFILE_OPX_PORT_IO_PORT_14_MASK						0x2000
#define ONS_PROFILE_OPX_PORT_IO_PORT_15_MASK						0x4000
#define ONS_PROFILE_OPX_PORT_IO_PORT_16_MASK						0x8000

#define ONS_PROFILE_SENSOR_ENABLE_X_ARM_FAR_SENSOR_MASK				0x1
#define	ONS_PROFILE_SENSOR_ENABLE_X_ARM_NEAR_SENSOR_MASK			0x2
#define	ONS_PROFILE_SENSOR_ENABLE_Y_ARM_FAR_SENSOR_MASK				0x4
#define	ONS_PROFILE_SENSOR_ENABLE_Y_ARM_NEAR_SENSOR_MASK			0x8
#define	ONS_PROFILE_SENSOR_ENABLE_Z_ARM_UP_SENSOR_MASK				0x10
#define	ONS_PROFILE_SENSOR_ENABLE_Z_ARM_DOWN_SENSOR_MASK			0x20
#define	ONS_PROFILE_SENSOR_ENABLE_XL_SENSOR_MASK					0x40
#define	ONS_PROFILE_SENSOR_ENABLE_AIR_FAN_SENSOR_MASK				0x80
#define	ONS_PROFILE_SENSOR_ENABLE_PALLET_SENSOR_MASK				0x100
#define	ONS_PROFILE_SENSOR_ENABLE_SEW_PEDAL_SENSOR_MASK				0x200
#define	ONS_PROFILE_SENSOR_ENABLE_LOCK_PEDAL_LEFT_SENSOR_MASK		0x400
#define	ONS_PROFILE_SENSOR_ENABLE_LOCK_PEDAL_RIGHT_SENSOR_MASK		0x800
#define ONS_PROFILE_SENSOR_AIR_PRESSURE_SENSOR_MASK					0x1000
#define ONS_PROFILE_SENSOR_LOADER_SAFETY_KEY_SENSOR_MASK			0x2000
#define ONS_PROFILE_SENSOR_COVER_SAFETY_KEY_SENSOR_MASK				0x4000
#define ONS_PROFILE_SENSOR_PALLET_COVER_OPEN_SENSOR_MASK			0x8000

#define ONS_PROFILE_APEDAL_A2D_START_MASK							0x1
#define ONS_PROFILE_APEDAL_A2D_STOP_MASK							0x2
#define ONS_PROFILE_APEDAL_A2D_LOCK_MASK							0x4
#define ONS_PROFILE_SCLAMP_APF_POS_CLAMP_OPEN_MASK					0x8
#define ONS_PROFILE_SCLAMP_APF_POS_CLAMP_CLOSE_MASK					0x10
#define ONS_PROFILE_SCLAMP_APF_CLAMP_MOVE_DT_S_MASK					0x20
#define ONS_PROFILE_SCLAMP_MIN_TIME_BETWEEN_PEDAL_READS_MASK		0x40
#define ONS_PROFILE_SCLAMP_MIN_TIME_BETWEEN_PEDAL_CHEACKS_MASK		0x80
#define ONS_PROFILE_SCLAMP_MIN_DISTANCE_IN_PEDAL_LEVEL_MASK			0x100
#define ONS_PROFILE_SCLAMP_MIN_TIME_BETWEEN_CLAMP_MOVES_MASK		0x200
#define ONS_PROFILE_SCLAMP_MIN_CLAMP_MOVE_MASK						0x400
#define ONS_PROFILE_SENSOR_UPPER_COVER_CLOSED_SENSOR_MASK			0x800
#define ONS_PROFILE_SENSOR_UPPER_COVER_OPENED_SENSOR_MASK			0x1000
#define ONS_PROFILE_SENSOR_X_INDEX_SENSOR_MASK          			0x2000
#define ONS_PROFILE_SENSOR_Y_INDEX_SENSOR_MASK      				0x4000
#define ONS_PROFILE_SENSOR_Z_INDEX_SENSOR_MASK                      0x8000

#define ONS_PROFILE_BOBBIN_CHANGER_XC_SENSOR_ON_MASK				0x1
#define ONS_PROFILE_BOBBIN_CHANGER_XH_SENSOR_ON_MASK				0x2
#define ONS_PROFILE_BOBBIN_CHANGER_YO_SENSOR_ON_MASK				0x4
#define ONS_PROFILE_BOBBIN_CHANGER_YI_SENSOR_ON_MASK				0x8
#define ONS_PROFILE_BOBBIN_CHANGER_CF_SENSOR_ON_MASK				0x10
#define ONS_PROFILE_BOBBIN_CHANGER_CB_SENSOR_ON_MASK				0x20
#define ONS_PROFILE_BOBBIN_CHANGER_BD_SENSOR_ON_MASK				0x40
#define ONS_PROFILE_BOBBIN_CHANGER_IGNOR_NO_BOBBIN_MASK			0x80//Ignore_No_Bobbin
#define ONS_PROFILE_BOBBIN_CHANGER_XC_SENSOR_DELAY_MASK    			0x100
#define ONS_PROFILE_BOBBIN_CHANGER_XH_SENSOR_DELAY_MASK				0x200
#define ONS_PROFILE_BOBBIN_CHANGER_YO_SENSOR_DELAY_MASK				0x400
#define ONS_PROFILE_BOBBIN_CHANGER_YI_SENSOR_DELAY_MASK				0x800
#define ONS_PROFILE_BOBBIN_CHANGER_CF_SENSOR_DELAY_MASK				0x1000
#define ONS_PROFILE_BOBBIN_CHANGER_CB_SENSOR_DELAY_MASK				0x2000
#define ONS_PROFILE_BOBBIN_CHANGER_BD_SENSOR_DELAY_MASK				0x4000
#define ONS_PROFILE_BOBBIN_CHANGER_JAW_CYLINDER_DELAY_MASK			0x8000

//tension
#define MSG_PROT_SET_TENSION_OFF    ( -1 )

// Machine Status Request Mask
//=============================

//Act Mask word 1 (16 bit : for 4 Act 3bit each one)
#define ONS_MACHINE_STATUS_ACT_1_PF_MASK									0x7
#define ONS_MACHINE_STATUS_ACT_1_APF_MASK									0x38
#define ONS_MACHINE_STATUS_ACT_1_APF_POS_MASK								0x7FC0

//Act Mask word 2 (16 bit : for 4 Act 3bit each one, 1 sensor 1bit)
#define ONS_MACHINE_STATUS_ACT_2_X_ARM_MASK									0x0007
#define ONS_MACHINE_STATUS_ACT_2_X_PIN_MASK									0x0038
#define ONS_MACHINE_STATUS_ACT_2_Y_ARM_MASK									0x01C0
#define ONS_MACHINE_STATUS_ACT_2_Z_ARM_MASK									0x0E00
#define ONS_MACHINE_STATUS_ACT_2_Z_PIN_MASK									0x7000
#define ONS_MACHINE_STATUS_ACT_2_ZL_SENSOR_MASK								0x8000

#define ONS_MACHINE_STATUS_ACT_3_ORISEW_CLAMP_MASK							0x7
#define ONS_MACHINE_STATUS_ACT_3_CLAMP_1_2STATE_MASK						0x38
#define ONS_MACHINE_STATUS_ACT_3_CLAMP_1_3STATE_MASK						0x1c0
#define ONS_MACHINE_STATUS_ACT_3_CLAMP_2_2STATE_MASK						0xE00
#define ONS_MACHINE_STATUS_ACT_3_CLAMP_2_3STATE_MASK						0x7000


#define ONS_MACHINE_STATUS_ACT_4_SERVO_CLAMP_MASK							0x3
#define ONS_MACHINE_STATUS_ACT_4_SERVO_CLAMP_LEVEL_MASK						0x3FC
#define ONS_MACHINE_STATUS_ACT_4_ANALOG_PEDAL_STATE_MASK					0x1C00
#define ONS_MACHINE_STATUS_ACT_4_SERVO_CLAMP_LOGIC_POS_MASK					0x6000

#define ONS_MACHINE_STATUS_ACT_5_UPPER_COVER_MASK							0x7
#define ONS_MACHINE_STATUS_ACT_5_UT_WELDER_STATE_MASK						0x38
#define ONS_MACHINE_STATUS_ACT_5_ANALOG_PEDAL_HIGHT_MASK					0x3FC0

#define ONS_MACHINE_STATUS_IO_1_READY_MASK									0x1
#define ONS_MACHINE_STATUS_IO_1_STOP_MASK									0x2	
#define ONS_MACHINE_STATUS_IO_1_CLI_MASK									0x4
#define ONS_MACHINE_STATUS_IO_1_AIR_PRESSURE_MASK							0x8
#define ONS_MACHINE_STATUS_IO_1_LOADER_SAFETY_KEY_MASK						0x10
#define ONS_MACHINE_STATUS_IO_1_COVER_SAFETY_KEY_MASK						0x20
#define ONS_MACHINE_STATUS_IO_1_PALLET_COVER_OPEN_SENSOR_MASK				0x40
    
#define ONS_MACHINE_STATUS_IO_2_SEW_PEDAL_MASK								0X1
#define ONS_MACHINE_STATUS_IO_2_LOCK_PEDAL_1_MASK							0X2
#define ONS_MACHINE_STATUS_IO_2_LOCK_PEDAL_2_MASK							0X4
#define ONS_MACHINE_STATUS_IO_2_AIR_FAN_MASK                  				0x8    
    
#define ONS_MACHINE_STATUS_IO_3_APS_CHECK_ALARM_MASK						0x1
#define ONS_MACHINE_STATUS_IO_3_COVER_OPEN_ALARM_MASK						0x2
#define ONS_MACHINE_STATUS_IO_3_SERVOS_EDM_MASK								0x4
#define ONS_MACHINE_STATUS_IO_3_LOWER_COVER_CLOSE_MASK						0x8
#define ONS_MACHINE_STATUS_IO_3_UPPER_COVER_CLOSE_MASK						0x10

    
// Servo Indication 
#define ONS_MACHINE_STATUS_SERVO_IND_SH_LOCK_MASK						0x3			//0000 0000 0000 0011
#define ONS_MACHINE_STATUS_SERVO_IND_SH_ROTATING_MASK					0x4			//0000 0000 0000 0100
#define ONS_MACHINE_STATUS_SERVO_IND_XY_LOCK_MASK						0x18		//0000 0000 0001 1000
#define ONS_MACHINE_STATUS_SERVO_IND_XY_MOVING_MASK						0x20		//0000 0000 0010 0000

#define ONS_MACHINE_STATUS_ACT1_PF_SHIFT								0
#define ONS_MACHINE_STATUS_ACT1_APF_SHIFT                               3
#define ONS_MACHINE_STATUS_ACT1_APF_POS_SHIFT                           6

#define ONS_MACHINE_STATUS_ACT_2_X_ARM_SHIFT								0
#define ONS_MACHINE_STATUS_ACT_2_X_PIN_SHIFT								3	
#define ONS_MACHINE_STATUS_ACT_2_Y_ARM_SHIFT								6
#define ONS_MACHINE_STATUS_ACT_2_Z_ARM_SHIFT								9
#define ONS_MACHINE_STATUS_ACT_2_Z_PIN_SHIFT								12
#define ONS_MACHINE_STATUS_ACT_2_ZL_SENSOR_SHIFT							15

#define ONS_MACHINE_STATUS_ACT_3_ORISEW_CLAMP_SHIFT							0
#define ONS_MACHINE_STATUS_ACT_3_CLAMP_1_2STATE_SHIFT						3
#define ONS_MACHINE_STATUS_ACT_3_CLAMP_1_3STATE_SHIFT						6
#define ONS_MACHINE_STATUS_ACT_3_CLAMP_2_2STATE_SHIFT						9
#define ONS_MACHINE_STATUS_ACT_3_CLAMP_2_3STATE_SHIFT						12

#define ONS_MACHINE_STATUS_ACT_4_SERVO_CLAMP_SHIFT							0
#define ONS_MACHINE_STATUS_ACT_4_SERVO_CLAMP_LEVEL_SHIFT					2
#define ONS_MACHINE_STATUS_ACT_4_ANALOG_PEDAL_STATE_SHIFT					10
#define ONS_MACHINE_STATUS_ACT_4_SERVO_CLAMP_LOGIC_POS_SHIFT				13

#define ONS_MACHINE_STATUS_ACT_5_UPPER_COVER_SHIFT							0
#define ONS_MACHINE_STATUS_ACT_5_UT_WELDER_STATE_SHIFT						3
#define ONS_MACHINE_STATUS_ACT_5_ANALOG_PEDAL_HIGHT_SHIFT					6

#define ONS_MACHINE_STATUS_IO_1_READY_SHIFT									0
#define ONS_MACHINE_STATUS_IO_1_STOP_SHIFT									1	
#define ONS_MACHINE_STATUS_IO_1_CLI_SHIFT									2
#define	ONS_MACHINE_STATUS_IO_1_AIR_PRESSURE_SHIFT							3
#define ONS_MACHINE_STATUS_IO_1_LOADER_SAFETY_KEY_SHIFT						4
#define ONS_MACHINE_STATUS_IO_1_COVER_SAFETY_KEY_SHIFT						5
#define ONS_MACHINE_STATUS_IO_1_PALLET_COVER_OPEN_SENSOR_SHIFT				6
    
#define ONS_MACHINE_STATUS_IO_2_SEW_PEDAL_SHIFT								0
#define ONS_MACHINE_STATUS_IO_2_LOCK_PEDAL_1_SHIFT							1
#define ONS_MACHINE_STATUS_IO_2_LOCK_PEDAL_2_SHIFT							2
#define ONS_MACHINE_STATUS_IO_2_AIR_FAN_SHIFT                               3
    
#define ONS_MACHINE_STATUS_IO_3_APS_CHECK_ALARM_SHIFT						0
#define ONS_MACHINE_STATUS_IO_3_COVER_OPEN_ALARM_SHIFT						1
#define ONS_MACHINE_STATUS_IO_3_SERVOS_EDM_SHIFT		 					2
#define ONS_MACHINE_STATUS_IO_3_LOWER_COVER_CLOSE_SHIFT						3
#define ONS_MACHINE_STATUS_IO_3_UPPER_COVER_CLOSE_SHIFT						4
    
#define ONS_MACHINE_STATUS_SERVO_IND_SH_LOCK_SHIFT							0 
#define ONS_MACHINE_STATUS_SERVO_IND_SH_ROTATING_SHIFT						2
#define ONS_MACHINE_STATUS_SERVO_IND_XY_LOCK_SHIFT							3
#define ONS_MACHINE_STATUS_SERVO_IND_XY_MOVING_SHIFT						5

//HW State Mask for RTC Status Msg
#define ONS_HW_STATE_CUT_IND_MASK							0x1	
#define ONS_HW_STATE_STOP_TYPE_IND_MASK						0xE
#define ONS_HW_STATE_LOCK_SH_UP_IND_MASK					0x10
#define ONS_HW_STATE_XY_JUMP_IND_MASK                       0x20
#define ONS_HW_STATE_XY_LOCK_IND_MASK                       0x40
    
//HW State bit shift fields
#define ONS_HW_STATE_CUT_IND_SHIFT					        0	
#define ONS_HW_STATE_STOP_TYPE_IND_SHIFT					1
#define ONS_HW_STATE_LOCK_SH_UP_IND_SHIFT                   4
#define ONS_HW_STATE_XY_JUMP_IND_SHIFT                      5
#define ONS_HW_STATE_XY_LOCK_IND_SHIFT                      6
   

//Alarm State bit mask
#define ONS_ALARM_STATE_BIT_AIR_PRESSURE_ALARM							0x1
#define ONS_ALARM_STATE_BIT_X_MOTOR_ALARM								0x2
#define ONS_ALARM_STATE_BIT_Y_MOTOR_ALARM								0x4
#define ONS_ALARM_STATE_BIT_Z_MOTOR_ALARM								0x8
#define ONS_ALARM_STATE_BIT_LOADER_SAFETY_ALARM							0x10

//RTC Config Mask
#define	MSG_PROT_RTC_CONFIG_THREAD_BREAK_ENABLE_MASK					0x1
#define	MSG_PROT_RTC_CONFIG_PALLET_ENABLE_MASK							0x2
#define	MSG_PROT_RTC_CONFIG_AIR_PRESSUER_ENABLE_MASK					0x4
#define	MSG_PROT_RTC_CONFIG_WIPER_ENABLE_MASK							0x8
#define	MSG_PROT_RTC_CONFIG_APF_ERROR_CHECK_ENABLE_MASK					0x10

//Machine Info Spool Counter Mask
#define	MSG_PROT_MACHINE_INFO_BOBBIN_COUNTER_ENABLE_MASK				0x1
#define	MSG_PROT_MACHINE_INFO_BOBBIN_COUNTER_STATE_MASK					0x6
#define MSG_PROT_MACHINE_INFO_WINDER_COUNTER_ENABLE_MASK				0x8
#define	MSG_PROT_MACHINE_INFO_WINDER_COUNTER_STATE_MASK					0x30
#define MSG_PROT_MACHINE_INFO_THREAD_COUNTER_ENABLE_MASK				0x40
#define	MSG_PROT_MACHINE_INFO_THREAD_COUNTER_STATE_MASK					0x180

//Machine Info Bobbin Changer State Mask
#define	MSG_PROT_MACHINE_INFO_BOBBIN_CHANGER_STATUS_MASK				0x07
#define	MSG_PROT_MACHINE_INFO_BOBBIN_CHANGER_FAULT_CODE_MASK			0X38

//Machine Info bit Spool Counter shift fields
#define MSG_PROT_MACHINE_INFO_BOBBIN_COUNTER_ENABLE_SHIFT  				0	
#define MSG_PROT_MACHINE_INFO_BOBBIN_COUNTER_STATE_SHIFT				1
#define MSG_PROT_MACHINE_INFO_WINDER_COUNTER_ENABLE_SHIFT               3
#define MSG_PROT_MACHINE_INFO_WINDER_COUNTER_STATE_SHIFT                4
#define MSG_PROT_MACHINE_INFO_THREAD_COUNTER_ENABLE_SHIFT               6
#define MSG_PROT_MACHINE_INFO_THREAD_COUNTER_STATE_SHIFT                7

//Machine Info Bobbin Changer State Shift
#define	MSG_PROT_MACHINE_INFO_BOBBIN_CHANGER_STATUS_SHIFT				0
#define	MSG_PROT_MACHINE_INFO_BOBBIN_CHANGER_FAULT_CODE_SHIFT			3   

//TTS Status
#define ONS_TTS_STATUS_ACT_1_LOADER_MASK								0x7
#define ONS_TTS_STATUS_ACT_1_CLAMP1_MASK                                0x38
#define ONS_TTS_STATUS_ACT_1_CLAMP2_MASK                                0x1C0
#define ONS_TTS_STATUS_ACT_1_GRIP_CLAMP_MASK                            0x0E00
#define ONS_TTS_STATUS_ACT_1_UNLOADER_MASK                              0x7000

#define ONS_TTS_STATUS_ACT_2_FLIPPER_UNIT_LOCK_MASK                     0x7
#define ONS_TTS_STATUS_ACT_2_FLIPPER_UNIT_SAFETY_DOOR_MASK              0x38

#define ONS_TTS_STATUS_IO_1_LOADER_DOOR_SENSOR_MASK                		0x1
#define ONS_TTS_STATUS_IO_1_STOP_MASK                               	0x2
#define ONS_TTS_STATUS_IO_1_READY_MASK                                  0x4
#define ONS_TTS_STATUS_IO_1_LOADER_OUT_MASK                             0x8
#define ONS_TTS_STATUS_IO_1_UNLOADER_OUT_MASK                           0x10
#define ONS_TTS_STATUS_IO_1_Y_HOME_SENSOR_MASK                          0x20
#define ONS_TTS_STATUS_IO_1_X_HOME_SENSOR_MASK                          0x40
#define ONS_TTS_STATUS_IO_1_SEW_AREA_DOOR_SENSOR_MASK                   0x80
#define ONS_TTS_STATUS_IO_1_SAFETY_KEY_MASK                             0x100
#define ONS_TTS_STATUS_IO_1_SAFETY_IND1_MASK                            0x200
#define ONS_TTS_STATUS_IO_1_SAFETY_IND2_MASK                            0x400
#define ONS_TTS_STATUS_IO_1_FLIPPER_SAFETY_DOOR_UNLOCK_SENSOR_MASK      0x800
#define ONS_TTS_STATUS_IO_1_FLIPPER_SAFETY_DOOR_LOCK_SENSOR_MASK        0x1000
#define ONS_TTS_STATUS_IO_1_FLIPPER_UNIT_LOCK_SENSOR_MASK               0x2000
#define ONS_TTS_STATUS_IO_1_FLIPPER_UNIT_UNLOCK_SENSOR_MASK             0x4000
#define ONS_TTS_STATUS_IO_1_FLIPPER_UNIT_HELP_MASK                      0x8000

//TTS Status shift
#define ONS_TTS_STATUS_ACT1_LOADER_SHIFT          						  0
#define ONS_TTS_STATUS_ACT1_CLAMP1_SHIFT          						  3    
#define ONS_TTS_STATUS_ACT1_CLAMP2_SHIFT          						  6
#define ONS_TTS_STATUS_ACT1_GRIP_CLAMP_SHIFT       						  9    
#define ONS_TTS_STATUS_ACT1_UNLOADER_SHIFT         						  12

#define ONS_TTS_STATUS_ACT_2_FLIPPER_UNIT_LOCK_SHIFT                      0
#define ONS_TTS_STATUS_ACT_2_FLIPPER_UNIT_SAFETY_DOOR_SHIFT               3
    
#define ONS_TTS_STATUS_IO_1_LOADER_DOOR_SENSOR_SHIFT                      0
#define ONS_TTS_STATUS_IO_1_STOP_SHIFT                              	  1
#define ONS_TTS_STATUS_IO_1_READY_SHIFT                             	  2
#define ONS_TTS_STATUS_IO_1_LOADER_OUT_SHIFT                              3
#define ONS_TTS_STATUS_IO_1_UNLOADER_OUT_SHIFT                            4
#define ONS_TTS_STATUS_IO_1_Y_HOME_SENSOR_SHIFT                           5
#define ONS_TTS_STATUS_IO_1_X_HOME_SENSOR_SHIFT                           6
#define ONS_TTS_STATUS_IO_1_SEW_AREA_DOOR_SENSOR_SHIFT                    7
#define ONS_TTS_STATUS_IO_1_SAFETY_KEY_SHIFT                              8    
#define ONS_TTS_STATUS_IO_1_SAFETY_IND1_SHIFT                             9
#define ONS_TTS_STATUS_IO_1_SAFETY_IND2_SHIFT                             10
#define ONS_TTS_STATUS_IO_1_FLIPPER_SAFETY_DOOR_UNLOCK_SENSOR_SHIFT       11
#define ONS_TTS_STATUS_IO_1_FLIPPER_SAFETY_DOOR_LOCK_SENSOR_SHIFT         12
#define ONS_TTS_STATUS_IO_1_FLIPPER_UNIT_LOCK_SENSOR_SHIFT                13
#define ONS_TTS_STATUS_IO_1_FLIPPER_UNIT_UNLOCK_SENSOR_SHIFT              14
#define ONS_TTS_STATUS_IO_1_FLIPPER_UNIT_HELP_SHIFT                       15
    
typedef enum
{
	RTC_INIT_SUCCESSFULLY		=	0,
	RTC_INIT_FAIL				=	1
}
	Msg_Prot_RTC_Init_Status_t;

typedef enum
{
	PROFILE_UPDATE_SUCCESSFULLY		=	0,
	PROFILE_UPDATE_FAIL				=	1
}
	ONS_Profile_Update_Status;

typedef enum
{
	 MSG_PROT_RUN_STITCHING_MODE			=	0,
	 MSG_PROT_RUN_DRYRUN_MODE				=	1,
	 MSG_PROT_RUN_STEP_MODE					=	2
}
	Msg_Prot_Run_Mode_t;

typedef enum
{
	MSG_PROT_HOME_START         			= 0,
	MSG_PROT_HOME_START_Z					= 1,
	MSG_PROT_HOME_START_MANUAL_Z			= 2,
	MSG_PROT_HOME_START_APF					= 3,
	MSG_PROT_HOME_START_XY_PHASE_1			= 4,
	MSG_PROT_HOME_START_XY_PHASE_2			= 5,
	MSG_PROT_HOME_ABORT						= 6,
	MSG_PROT_HOME_EXIT						= 7
}
	Msg_Prot_Home_Mode_t;

typedef enum
{
	MSG_PROT_DIAG_ACT_START				= 0,
	MSG_PROT_DIAG_ACT_LOCK_AT_INDEX		= 1,
	MSG_PROT_DIAG_ACT_MOVE_TO_HOME_X	= 2,
	MSG_PROT_DIAG_ACT_MOVE_TO_HOME_Y	= 3,
	MSG_PROT_DIAG_ACT_ABORT				= 4,
	MSG_PROT_DIAG_ACT_EXIT				= 5
}
	Msg_Prot_Diag_Act_Mode_t;

typedef enum
{
	MSG_PROT_HOME_Z_NOT_RELEVANT = -1,
	MSG_PROT_HOME_Z_FW = 0,
	MSG_PROT_HOME_Z_BW = 1,
}
	Msg_Prot_Home_Z_Direction_t;

//RTC State machine
typedef enum
{
	RTC_IN_READY_STATE				= 0,
	RTC_IN_RUN_STATE				= 1,
	RTC_HOMING_IN_READY_STATE		= 2,
	RTC_HOMING_IN_Z_PHASE			= 3,
    RTC_HOMING_IN_APF_PHASE			= 4,
	RTC_HOMING_IN_XY_PHASE_1		= 5,
	RTC_HOMING_IN_XY_PHASE_2		= 6,
	RTC_DIAG_ACT_IN_READY_STATE		= 7,
	RTC_DIAG_ACT_IN_LOCK_AT_INDEX	= 8,
	RTC_DIAG_ACT_IN_X_PHASE			= 9,
	RTC_DIAG_ACT_IN_Y_PHASE			= 10
}
	RTC_State_t;


typedef enum
{
	RTC_HOME_IN_PROGRESS				=	0,
 	RTC_HOME_PASS						=	1,
    RTC_HOME_FAIL						=	2
}
	RTC_Home_Result_t;

typedef enum
{
	RTC_DIAG_ACT_IN_PROGRESS = 0,
	RTC_DIAG_ACT_PASS = 1,
	RTC_DIAG_ACT_FAIL = 2
}
	RTC_Diag_Act_Result_t;

typedef enum
{
	RTC_NO_ACTION                       = 0,
	RTC_UNLOCK_SH_STARTED               = 1,
	THREAD_BREAK_OCCURRED               = 2,
    RTC_UNLOCK_XY_STARTED               = 3
}
    RTC_Action_Start_Report_t;

typedef enum
{
	LOCK_SH_UP_POS						=	0,
	UNLOCK_SH							=	1,
	LOCK_SH_CURRENT_POS					=	2
}
	SH_UP_Pos_t;

typedef enum
{
	LOCK_XY_POS = 0,
	UNLOCK_XY_POS = 1
}
	XY_Lock_State_t;

typedef enum
{
	HOST_PING						= 0,
	RTC_PING						= 1
}
	Ping_Initiator_t;

// 
typedef enum
{
	REPLY_OFF_REQ				= 0,
	REPLY_UPON_REQ				= 1,
	REPLY_UPON_CHANGE			= 2,
	REPLY_EVERY_TIME_PERIOD	= 3
}	
	Status_Reply_Mode_t;

typedef enum
{
	UNLOCKED = 0,
	UNLOCKING = 1,
	LOCKING = 2,
	LOCKED = 3
}	
ONS_Lock_State_t;

typedef enum
{
	ONS_OFF = 0,
	ONS_ON = 1
}
ONS_On_Off_State_t;

typedef enum
{
	ONS_DOWN = 0,
	ONS_UP = 1
}
ONS_Up_Down_State_t;

typedef enum
{
	PF_UNKNOWN,
	PF_DOWN,
	PF_MOVE_DOWN,
	PF_MOVE_UP,
	PF_UP,
	PF_FAIL
}
	ONS_PF_State_t;

typedef enum
{
    APF_UNKNOWN,
	APF_NOT_MOVING,
	APF_MOVING,
	APF_ERROR
            
}
	ONS_APF_State_t;
	 
typedef enum
{
	NO_STOP_IND                     = 0,
	STOP_NEEDLE_DOWN_IND            = 1,
	STOP_NEEDLE_UP_IND              = 2,
	STOP_REGULAR_IND                = 3							
}
	ONS_Stop_Ind_Type_t;

typedef enum
{
	RTC_NO_ERROR                    = 0,
	RTC_CUT_CYCLE_FAILED            = 1,
	RTC_STOP_FAILED                 = 2,
    RTC_JUMP_FAILED                 = 3,
    RTC_LOCK_SH_FAILED              = 4,
    RTC_UNLOCK_SH_FAILED            = 5,
    RTC_LOCK_XY_FAILED              = 6,
    RTC_UNLOCK_XY_FAILED            = 7        
}
	ONS_RTC_Status_Error_type_t;

typedef enum
{
    ENTITY_STATE_UT_WELDER_UP					= 0,
	ENTITY_STATE_ARM_NEAR						= 0,
	ENTITY_STATE_ARM_UP							= 0,
	ENTITY_STATE_PINS_UP						= 0,
	ENTITY_STATE_PINS_LOCK						= 0,
	ENTITY_STATE_CLAMP_LOCK						= 0,
	ENTITY_STATE_UPPER_COVER_CLOSE				= 0,
	ENTITY_STATE_UPPER_COVER_PIN_LOCK			= 0,
	ENTITY_STATE_TTS_LOADER_ARM_IN   			= 0,
    ENTITY_STATE_TTS_CLAMP_1_CLOSE              = 0,        
    ENTITY_STATE_TTS_CLAMP_2_CLOSE              = 0,        
    ENTITY_STATE_TTS_GRIP_CLAMP_CLOSE           = 0,        
    ENTITY_STATE_TTS_UNLOADER_ARM_IN 			= 0,
    ENTITY_STATE_TTS_FLIPPER_UNIT_LOCK 			= 0,        
    ENTITY_STATE_TTS_FLIPPER_UNIT_SAFE_DOOR_OPEN= 0,
	            
	ENTITY_STATE_UT_WELDER_DOWN					= 1,
    ENTITY_STATE_ARM_FAR						= 1,
	ENTITY_STATE_ARM_DOWN						= 1,
	ENTITY_STATE_PINS_DOWN						= 1,
	ENTITY_STATE_PINS_UNLOCK					= 1,
	ENTITY_STATE_CLAMP_UNLOCK					= 1,
	ENTITY_STATE_UPPER_COVER_OPEN				= 1,
	ENTITY_STATE_UPPER_COVER_PIN_UNLOCK			= 1,
	ENTITY_STATE_TTS_LOADER_ARM_OUT  			= 1,
    ENTITY_STATE_TTS_CLAMP_1_OPEN               = 1,        
    ENTITY_STATE_TTS_CLAMP_2_OPEN               = 1,        
    ENTITY_STATE_TTS_GRIP_CLAMP_OPEN            = 1,        
    ENTITY_STATE_TTS_UNLOADER_ARM_OUT 			= 1,
    ENTITY_STATE_TTS_FLIPPER_UNIT_UNLOCK        = 1,
    ENTITY_STATE_TTS_FLIPPER_UNIT_SAFE_DOOR_CLOSE= 1,
    
    ENTITY_STATE_UT_WELDER_UP_TO_DOWN			= 2,
	ENTITY_STATE_ARM_NEAR_TO_FAR				= 2,
	ENTITY_STATE_ARM_UP_TO_DOWN					= 2,
	ENTITY_STATE_PINS_UP_TO_DOWN				= 2,
	ENTITY_STATE_PINS_LOCK_TO_UNLOCK			= 2,
	ENTITY_STATE_CLAMP_LOCK_TO_UNLOCK			= 2,
	ENTITY_STATE_UPPER_COVER_CLOSE_TO_OPEN		= 2,
	ENTITY_STATE_TTS_LOADER_ARM_IN_TO_OUT   	= 2,
    ENTITY_STATE_TTS_CLAMP_1_CLOSE_TO_OPEN      = 2,        
    ENTITY_STATE_TTS_CLAMP_2_CLOSE_TO_OPEN      = 2,        
    ENTITY_STATE_TTS_GRIP_CLAMP_CLOSE_TO_OPEN   = 2,        
    ENTITY_STATE_TTS_UNLOADER_ARM_IN_TO_OUT     = 2,
    ENTITY_STATE_TTS_FLIPPER_UNIT_LOCK_TO_UNLOCK= 2,                
    ENTITY_STATE_TTS_FLIPPER_UNIT_SAFE_DOOR_OPEN_TO_CLOSE = 2,
	ENTITY_STATE_UPPER_COVER_PIN_LOCK_TO_UNLOCK	= 2,
	            
	ENTITY_STATE_UT_WELDER_DOWN_TO_UP			= 3,
	ENTITY_STATE_ARM_FAR_TO_NEAR				= 3,
	ENTITY_STATE_ARM_DOWN_TO_UP					= 3,
	ENTITY_STATE_PINS_DOWN_TO_UP				= 3,
	ENTITY_STATE_PINS_UNLOCK_TO_LOCK			= 3,
	ENTITY_STATE_CLAMP_UNLOCK_TO_LOCK			= 3,
	ENTITY_STATE_UPPER_COVER_OPEN_TO_CLOSE		= 3,
	ENTITY_STATE_UPPER_COVER_PIN_UNLOCK_TO_LOCK	= 3,
	ENTITY_STATE_TTS_LOADER_ARM_OUT_TO_IN   	= 3,
    ENTITY_STATE_TTS_CLAMP_1_OPEN_TO_CLOSE      = 3,        
    ENTITY_STATE_TTS_CLAMP_2_OPEN_TO_CLOSE      = 3,        
    ENTITY_STATE_TTS_GRIP_CLAMP_OPEN_TO_CLOSE   = 3,        
    ENTITY_STATE_TTS_UNLOADER_ARM_OUT_TO_IN     = 3,
    ENTITY_STATE_TTS_FLIPPER_UNIT_UNLOCK_TO_LOCK= 3,        
    ENTITY_STATE_TTS_FLIPPER_UNIT_SAFE_DOOR_CLOSE_TO_OPEN = 3,
            
	ENTITY_STATE_CLAMP_TO_MID				= 3,
	ENTITY_STATE_CLAMP_MID					= 4,

    ENTITY_STATE_UNDEFINE					= 6,
	ENTITY_STATE_ERROR						= 7
    
}
	ONS_Entity_State_t;

typedef enum
{
	ONS_SENSOR_PRESS_STATE		= 0,//Nissim to check

	LOWER_COVER_CLOSED_SENSOR_ON        = 0,
    UPPER_COVER_OPENED_SENSOR_OFF       = 0,
	UPPER_COVER_CLOSED_SENSOR_OFF		= 0,
    LODER_KEY_ENABLE_SAFETY     		= 0,//safety enabled
	COVER_KEY_DISABLE_SAFETY    		= 0,//safety disabled
    LOADER_SAFETY_DISABLE_OFF        	= 0,//safety enabled
    SERVO_EDM_OFF                       = 0,
	 AUTO_SEW_SENSOR_ON					= 0,
    TTS_LOADER_DOOR_CLOSE               = 0,        
            
    AUTO_SEW_SENSOR_OFF					= 1,
    ONS_SENSOR_UNPRESS_STATE	= 1,//Nissim to check
	LOWER_COVER_CLOSED_SENSOR_OFF       = 1,
	UPPER_COVER_CLOSED_SENSOR_ON		= 1,
    UPPER_COVER_OPENED_SENSOR_ON        = 1,
    LODER_KEY_DISABLE_SAFETY    		= 1,//safety disabled
    COVER_KEY_ENABLE_SAFETY             = 1,//safety enabled
//    COVER_OPEN_ALARM_OFF                = 1,
    SERVO_EDM_ON                        = 1,
    TTS_LOADER_DOOR_OPEN                = 1,


}
	ONS_Sensor_State_t;

typedef enum
{
	ONS_ANALOG_PEDAL_PRESSED_STATE		= 0,
	ONS_ANALOG_PEDAL_UNPRESSED_STATE	= 1,
	ONS_ANALOG_PEDAL_MID_STATE			= 2,
	ONS_ANALOG_PEDAL_UNDEFINED_STATE	= 3
}
	ONS_Analog_Pedal_State_t;

typedef enum
{
	ONS_SERVO_CLAMP_CLOSE_STATE = 0,
	ONS_SERVO_CLAMP_MID_STATE = 1,
	ONS_SERVO_CLAMP_OPEN_STATE = 2,
	ONS_SERVO_CLAMP_UNDEFINED_STATE = 3
}
	ONS_RTC_Servo_Clamp_Logic_Pos_t;

typedef enum
{
	ONS_SERVO_CLAMP_NOT_MOVING = 0,
	ONS_SERVO_CLAMP_MOVING = 1,
	ONS_SERVO_CLAMP_SYNC_MODE = 2,
	ONS_SERVO_CLAMP_UNDEFINED = 3
}
	ONS_Servo_Clamp_State_t;

typedef enum
{
	ONS_SERVO_CLAMP_SYNC_MODE_ON	= 0,
	ONS_SERVO_CLAMP_SYNC_MODE_OFF	= 1,
	ONS_SERVO_CLAMP_SET_TO_MID_POS	= 2,
	ONS_SERVO_CLAMP_SET_TO_LOCK		= 3,
	ONS_SERVO_CLAMP_SET_TO_UNLOCK	= 4
}
	ONS_Servo_Clamp_Mode_t;

typedef enum
{
	ONS_LOAD_XY_POS_SUCCESS = 0,
	ONS_LOAD_XY_POS_WAITING_FOR_RESPONSE = 100
}
	ONS_Load_XY_Pos_State_t;

typedef enum
{
	LAMP_SET_TO_OFF					= 0,
	LAMP_SET_TO_RED					= 1,
	LAMP_SET_TO_GREEN				= 2,
	LAMP_SET_TO_BLINK_RED_SLOW		= 3,
	LAMP_SET_TO_BLINK_RED_MID		= 4,
	LAMP_SET_TO_BLINK_RED_FAST		= 5,
	LAMP_SET_TO_BLINK_GREEN_SLOW	= 6,
	LAMP_SET_TO_BLINK_GREEN_MID		= 7,
	LAMP_SET_TO_BLINK_GREEN_FAST	= 8,
	LAMP_SET_TO_BLINK_RED_GREEN		= 9,
	LAMP_SET_TO_GREEN_AND_RED		= 10

}
	Msg_Prot_Lamp_Command_t;


typedef enum
{
	COVER_SAFETY_ALARM_NO  = 0,
	COVER_SAFETY_ALARM_OFF = 1
}
	Msg_Prot_Cover_Safty_Alarm_t;

typedef enum
{
	SERVO_EDM_DISABLE	= 0,
	SERVO_EDM_ENABLE	= 1
}
	Msg_Prot_Servo_EDM_t;

// Message structure
typedef struct
{
	UINT_16  	Id;						// Message ID according to the Global USB Message list.
	INT_16	  	Size;					// Total size of message include the header size.
	UINT_32		Serial_Number;			// Message S/N this number is  for each message sent.
	UINT_32   	Time_Stamp;				// Current system time in millisecond.
}
	Message_Header_t;

typedef struct
{
	Message_Header_t	Message_Header;								// Generic message header
	ONS_BYTE			Data[MSG_PROT_GEN_MSG_MAX_DATA_SIZE];		// Generic Data array (maximum rx data message size)
}
	Generic_Message_t;


typedef ONS_BYTE Rcv_Msg_Data_t[MSG_PROT_GEN_MSG_MAX_DATA_SIZE];


typedef struct
{
	INT_16		Wait;				// Waiting time until start of Message execution (in millisecond)
	INT_16		Num_Of_Msg;			// Number of message RTC will send to host as replay
	INT_16		Delta_Time;			// Time delay between messages (in millisecond)
	INT_16		Return_Size;	 	// Size of RTC replay message data
	INT_16	 	Fill_Size;			// data size in Data_Element
	INT_16		Dummy;				// for packing use
	UINT_32		SN;					// Serial Number (same as in header)
	UINT_32		Checksum;			// Checksum calculation include all fields exclude the checksum itself.
}

	Msg_Prot_Host_Tst_Msg_info_t;


typedef struct
{
		Message_Header_t			  Msg_Hdr;						// Generic message type
		Msg_Prot_Host_Tst_Msg_info_t  Test_msg_info;				// Host to RTC test Message info
		ONS_BYTE				      Fill[TEST_HOST_FILL_SIZE];		// buffer for Message Data (maximum size)
}
	Msg_Prot_Host_Tst_Msg_t;

typedef struct
{
	UINT_32		Total_Rcv_Msg;				// total Number of received messages
	UINT_32		Total_Rcv_data_size;		// total size of data received
	UINT_32		Total_Rcv_Lost_Msgs;		// total number of messages received with error
	UINT_32		Total_Tx_Lost_Msgs;		    // total number of messages Tx with error
	UINT_32		Total_Tx_Msgs;		        // total number of messages Tx
}

	Msg_Prot_Test_Msg_Status_t;



typedef struct
{
	UINT_32						Origin_Msg_SN;		//contain the S/N received from the host (the same on that this message generated from)
	Msg_Prot_Test_Msg_Status_t	Status;				// the status data from RTC
	INT_16 						Fill_Size;			// data size in Data_Element
	INT_16 						Dummy;			    // dummy
    UINT_32                     Busy_Time;          //Busy loop time
	UINT_32						Checksum;			// calculated data checksum
}

	Msg_Prot_RTC_Tst_Hdr_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	Msg_Prot_RTC_Tst_Hdr_t  	Tst_msg_info;				// Host to RTC test Message info
	ONS_BYTE				   	Fill[TEST_RTC_FILL_SIZE];	// buffer for Message Data (maximum size)

}
	Msg_Prot_RTC_Tst_Msg_t;

typedef struct
{
	RTC_Stitch_t				Stitch;
	INT_16						Flush_Buffer;
} Stitch_Info_t;

typedef struct
{
		Message_Header_t			Msg_Hdr;
		Stitch_Info_t				Stitch_Info;
}
	Msg_Prot_Stitch_Msg_t;

typedef struct
{
	INT_16		Stitch_ID;
	// The actual RTC value
	INT_16		Current_RPM;
	INT_16		Current_X_Pos;
	INT_16		Current_Y_Pos;
	// The target value for RTC to reach
	INT_16		Target_RPM;
	INT_16		Target_X_Pos;
	INT_16		Target_Y_Pos;
	INT_16		XY_Moving;			// RTC Indicate if there is movement in XY
	INT_16		Sew_Head_Rotating;	// RTC Indicate if the sew head rotating
	INT_16		State;				// RTC state : Ready / Run
	INT_16		Action_Start;		// RTC start operation ID
	INT_16		Buff_Stitches_Num;
	INT_16		HW_State;
	INT_16		Error_Code;
	INT_16		Reason_Code;
}
	Msg_Prot_RTC_Status_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	Msg_Prot_RTC_Status_t		RTC_Status;
}
	Msg_Prot_RTC_Status_Msg_t;

typedef struct
{
	INT_16		Mode;			// Stitching / DryRun / Step
	UINT_16		Delay;			// millisecond
	INT_16 		Direction;		// DryRun FW / BW
	INT_16      APF_Move;		// DryRun Move the APF or not
}
	Msg_Prot_RTC_Run_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	Msg_Prot_RTC_Run_t			Info;
}
	Msg_Prot_RTC_Run_Msg_t;

	typedef struct
	{
		Message_Header_t			Msg_Hdr;
		UINT_16						Dry_Run_Delay;
	}
	Msg_Prot_RTC_Dry_Run_Delay_Update_Msg_t;

typedef struct
{
	INT_16		Error_Code;			// RTC Error code
	char		Error_Data[MSG_PROT_RTC_ERROR_DATA_SIZE];
}
	Msg_Prot_RTC_Err_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	Msg_Prot_RTC_Err_t			Info;
}
	Msg_Prot_RTC_Err_Msg_t;

typedef struct
{

	INT_16		X_pos;
	INT_16		Y_pos;
	INT_16		Scale_X;
	INT_16		Scale_Y;

}
	Msg_Prot_RTC_Move_X_Y_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	Msg_Prot_RTC_Move_X_Y_t		Info;
}
	Msg_Prot_RTC_Move_X_Y_Msg_t;

typedef struct
{
	UINT_16		Type;
	UINT_16		Time;
	UINT_16		Data;
}
	Msg_Prot_RTC_Dump_Data_t;

typedef struct
{
	INT_16						Dump_Type;
	INT_16						Info_Size;
	Msg_Prot_RTC_Dump_Data_t	Data[MSG_PROT_RTC_DUMP_DATA_SIZE];
}
	Msg_Prot_RTC_Dump_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	Msg_Prot_RTC_Dump_t			Info;
}
	Msg_Prot_RTC_Dump_Msg_t;

typedef struct
{
	INT_16						Home_Mode;
	INT_16						Z_Home_Direction;
}
	Msg_Prot_Home_Mode_Data_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	Msg_Prot_Home_Mode_Data_t	Home_Mode_Data;
}
	Msg_Prot_Home_Mode_Msg_t;
//------------------------------------------------------------------
typedef struct
{
	INT_16						Home_Mode;
	INT_16						Z_Home_Direction;
	INT_16						HomeVal_1;
	INT_16						HomeVal_2;
}
	Msg_Prot_Home_Mode_Data3020_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_Home_Mode_Data3020_t	Home_Mode_Data3020;
}
	Msg_Prot_Home_Mode_Msg3020_t;
//------------------------------------------------------------------
typedef struct
{
	INT_16						Diag_Act_Mode;
	INT_16						Direction_Logic;
	INT_16						Sensor_Logic;
	INT_16						Move_Speed;
	INT_16						Move_Distance;
	INT_16						Move_To_Home_Axis_Timeout;
}
	Msg_Prot_Diag_Act_Mode_Data_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_Diag_Act_Mode_Data_t	Diag_Act_Mode_Data;
}
	Msg_Prot_Diag_Act_Mode_Msg_t;
//------------------------------------------------------------------

typedef struct
{
	INT_16					RTC_Home_Mode;
	INT_16					X_pos;
	INT_16					Y_pos;
	INT_16					XY_Moving;
	INT_16					Sew_Head_Rotating;
	INT_16  				Home_Res;
	INT_16					Error_Code;
}
	Msg_Prot_RTC_Home_Status_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	Msg_Prot_RTC_Home_Status_t	RTC_Status;
}
	Msg_Prot_RTC_Home_Status_Msg_t;

typedef struct
{
	INT_16					RTC_Diag_Act_Mode;
	INT_16					X_pos;
	INT_16					Y_pos;
	INT_16					XY_Moving;
	INT_16					Sew_Head_Rotating;
	INT_16  				Diag_Act_Res;
	INT_16					Error_Code;
}
	Msg_Prot_RTC_Diag_Act_Status_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_RTC_Diag_Act_Status_t	RTC_Status;
}
Msg_Prot_RTC_Diag_Act_Status_Msg_t;

typedef struct
{
	INT_16		IO_Act_ID;
	INT_16		IO_Act_State; //state
}
	Msg_Prot_IO_Act_t;

typedef struct
{
	INT_16				Num_OF_IO_Act_ID;
	Msg_Prot_IO_Act_t 	IO_Act_data[MSG_PROT_MAX_IO_ACT_NUM];
}
	Msg_Prot_IO_Act_Data_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	Msg_Prot_IO_Act_Data_t		IO_Act_Info;
}
	Msg_Prot_IO_Act_Cmd_t;


typedef struct
{
	Message_Header_t		Msg_Hdr;
	char					Debug_Data[MSG_PROT_RTC_DEBUG_DATA_SIZE];

}	Msg_Prot_RTC_Dbg_Msg_t;


typedef struct
{

	Message_Header_t			Msg_Hdr;

}
	Msg_Prot_Protocol_Validation_Req_Msg_t;

typedef struct
{
	INT_16				RTC_Base_Ver;
	INT_16				RTC_Major_Ver;
	INT_16				RTC_Minor_Ver;
	INT_16				Msg_Prot_Base;
	INT_16				Msg_Prot_Major;
	INT_16				Msg_Prot_Minor;
}
	Msg_Prot_RTC_Version_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	Msg_Prot_RTC_Version_t		Version_Info;
}
	Msg_Prot_Protocol_Validation_Status_Msg_t;
	
typedef struct
{
	Message_Header_t			Msg_Hdr;
	INT_16						Lock_SH_State;
}
	Msg_Prot_Lock_SH_State_Msg_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	INT_16						Lock_SH_State;
	INT_16						Lock_SH_value;
}
	Msg_Prot_Lock_SH_State_Msg3020_t;
	
typedef struct
{
	Message_Header_t			Msg_Hdr;
	INT_16						XY_Pos_State;
}
	Msg_Prot_Lock_XY_Pos_Msg_t;

typedef struct
{

	Message_Header_t			Msg_Hdr;

}
	Msg_Prot_Dump_Req_Msg_t;


typedef struct
{
	UINT_16	Update_Data_Mask;
	INT_16	ZS_Sew_Direction;
    INT_16	ZS_Lock_Delay;
    INT_16	ZS_Direction_Change_Delay;
    INT_16 	ZS_Default_Update_Data_Position;
    INT_16 	ZS_Default_Stop_Position;
	INT_16	ZS_Stop_By_Step_Counter;
	INT_16	ZS_Valid_Pos_Offest_Factor;
	INT_16	ZS_Lock_Polarity;	
}
	Msg_Prot_Profile_1_Data_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_Profile_1_Data_t		RTC_Profile_1_Data;
}
	Msg_Prot_Update_Profile_1_Msg_t;


typedef struct
{
	UINT_16	Update_Data_Mask;			//modify feb26,2020.
	INT_16	XYS_X_Positive_Dir;
	INT_16	XYS_Y_Positive_Dir;
	INT_16	XYS_Init_X_Position;
	INT_16	XYS_Init_Y_Position;
	INT_16 	XYS_Lock_Delay;
	INT_16 	XYS_Direction_Change_Delay;
	INT_16	TB_Exist;
	INT_16	TB_Sensor_Id;
	INT_16	TB_Sensor_ON;
	INT_16	TB_Reset_IO;
	INT_16	TB_Reset_Cmd;
	INT_16	TB_Start_Threshold;
	INT_16	TB_Run_Threshold;	
	INT_16	TB_Num_Of_Stitches_In_Start_Mode;
	INT_16	XYS_Lock_Polarity;
	INT_16	XYS_Slow_Down_Enable;
	INT_16	XYS_Slow_Down_DT_Limit;
}
	Msg_Prot_Profile_2_Data_t;


typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_Profile_2_Data_t		RTC_Profile_2_Data;
}
	Msg_Prot_Update_Profile_2_Msg_t;

typedef struct
{
	UINT_16	Update_Data_Mask;
	INT_16	Max_XY_Speed;
	INT_16	Max_XY_Accel;
	INT_16	Max_DT_Value;
	INT_16	ISR_Time;
	INT_16	ISR_Time_No_Calc;
	INT_16  XY_Step;
	INT_16  Cut_Rev_Step_RPM;
	INT_16  Cut_Prepare_Cut_Position;
	INT_16  Cutter_Off_Position;
	INT_16  Cut_Reverse_End_Position;
	INT_16  Cutter_On_TT_Level;
	INT_16  Cutter_Off_TT_Level;
	INT_16  Cut_Stopping_Time;
	INT_16  Manual_Cut_RPM;
	INT_16	Cutter_Off_Step_Pos;
	INT_16	Cutter_Off_Step_Pos_Max;
}
	Msg_Prot_Profile_3_Data_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_Profile_3_Data_t		RTC_Profile_3_Data;
}
Msg_Prot_Update_Profile_3_Msg_t;

typedef struct
{
	UINT_16	Update_Data_Mask;
	INT_16	Z_Home_RPM;
	INT_16	Z_Home_Distance;
	INT_16	XY_Type;
	INT_16	XY_Home1_X_Move;
	INT_16	XY_Home1_Y_Move;
	INT_16	XY_Home1_Speed;
	INT_16  XY_Home2_Speed;
	INT_16  XY_Home2_X_Shift;
	INT_16  XY_Home2_Y_Shift;
	INT_16  XY_Home2_X_Move;
	INT_16  XY_Home2_Y_Move;
	INT_16  X_Home_Coordinate;
	INT_16  Y_Home_Coordinate;
	INT_16	XY_Home_Move_Timeout;
}
Msg_Prot_Profile_4_Data_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_Profile_4_Data_t		RTC_Profile_4_Data;
}
Msg_Prot_Update_Profile_4_Msg_t;
//------------------------------------------------
//	ons3020-profile4: 17 parameters.
//	tts-ons-profile4: 15 parameters.
typedef struct
{
	UINT_16	Update_Data_Mask;
	INT_16	Z_Home_RPM;
	INT_16	Z_Home_Distance;
	INT_16	XY_Type;
	INT_16	XY_Home1_X_Move;
	INT_16	XY_Home1_Y_Move;
	INT_16	XY_Home1_Speed;
	INT_16  XY_Home2_Speed;
	INT_16  XY_Home2_X_Shift;
	INT_16  XY_Home2_Y_Shift;
	INT_16  XY_Home2_X_Move;
	INT_16  XY_Home2_Y_Move;
	INT_16  X_Home_Coordinate;
	INT_16  Y_Home_Coordinate;
	INT_16	XY_Home_Move_Timeout;
	INT_16  APF_Position;
	INT_16  APF_DTs;
}
Msg_Prot_Profile_4_3020_Data_t;

typedef struct
{
	Message_Header_t					Msg_Hdr;
	Msg_Prot_Profile_4_3020_Data_t		RTC_Profile_4_3020_Data;
}
Msg_Prot_Update_Profile_4_3020_Msg_t;


typedef struct
{
	UINT_16	Update_Data_Mask;
	UINT_16	Status_Msg_MS_Delay;
	UINT_16	Run_State_Stoping_Mode_Timeout;
	INT_16	SH_Up_Speed;
	INT_16	SH_Up_Stop_Angle;
	INT_16	TB_Num_Of_Stitches_In_Start_Mode;
	INT_16	DR_STP_Dt_Vx;
	INT_16	DR_STP_Dt_Vy;
	UINT_16	Quick_Stop_RPM;
	UINT_16	RPM_Limit_For_Quick_Stop;
	UINT_16	Stop_RPM;
	INT_16 	Stop_Position_No_Cut;
	INT_16 	Stop_Position_Ndl_Dn;
	INT_16 	Stop_Position_Ndl_Up;
	INT_16	PF_Enable;
	INT_16	APF_Enable;
	INT_16	APF_Move_Dt;
}
Msg_Prot_Profile_5_Data_t;

typedef struct
{
	UINT_16	Update_Data_Mask;
	INT_16 	Stop_Position_No_Cut_Step;
	INT_16 	Stop_Position_No_Cut_Step_Max;
	INT_16 	Stop_Position_Ndl_Dn_Step;
	INT_16 	Stop_Position_Ndl_Dn_Step_Max;
	INT_16 	Stop_Position_Ndl_Up_Step;
	INT_16 	Stop_Position_Ndl_Up_Step_Max;
	INT_16  APF_Home_Distance;
	INT_16	APF_Home_Position;
	INT_16	APF_Home_Sensor_Logic;
	INT_16	APF_Home_Dt;
	INT_16  APF_Home_Move_TimeOut;
	INT_16  Servo_Clamp_Enable;
	INT_16  APF_Pre_Home_Distance;
	INT_16  APF_Home_Out_Of_Sensor_Distance;
	UINT_16	DR_APF_Up_Delay;
	UINT_16	DR_APF_Dn_Delay;
}
	Msg_Prot_Profile_6_Data_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_Profile_5_Data_t		RTC_Profile_5_Data;
}
Msg_Prot_Update_Profile_5_Msg_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_Profile_6_Data_t		RTC_Profile_6_Data;
}
Msg_Prot_Update_Profile_6_Msg_t;

typedef struct
{
	INT_16	Profile_Type_Num;
	INT_16	Profile_Update_Status;
}
	Msg_Prot_Profile_Update_Status_t;


typedef struct
{
	Message_Header_t					Msg_Hdr;
	Msg_Prot_Profile_Update_Status_t	Info;
}
	Msg_Prot_Profile_Update_Status_Msg_t;


typedef struct
{
	Message_Header_t			Msg_Hdr;
}
	Msg_Prot_Perform_Init_Req_Msg_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
}
	Msg_Prot_RTC_Reset_Cmd_Msg_t;


typedef struct
{
	Message_Header_t			Msg_Hdr;
	INT_16						Status;
}
	Msg_Prot_RTC_Init_Status_Msg_t;

typedef struct
{
	INT_32 Time_tag;
	INT_16 Ping_Initiator;
	INT_16 Initiator_Msg_ID;
	INT_16 Data_1;
	INT_16 Data_2;
	INT_16 Data_3;
	INT_16 Data_4;
	INT_16 Data_5;
	INT_16 Data_6;
	INT_16 Data_7;
}
	Msg_Prot_Ping_Pong_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	Msg_Prot_Ping_Pong_t		Info;
}
	Msg_Prot_Ping_Pong_Msg_t;

typedef struct
{
	INT_16	Mode;
	INT_16	Time_Period;
	UINT_16 Status_Msg_ID;
	INT_16	Act_1_Mask;
	INT_16	Act_2_Mask;
	INT_16	Act_3_Mask;	
	INT_16	Act_4_Mask;
	INT_16	Act_5_Mask;
	INT_16	IO_1_Mask;
	INT_16	IO_2_Mask;
	INT_16	IO_3_Mask;

}
	Msg_Prot_Machine_Status_Request_t;

typedef struct
{
	Message_Header_t					Msg_Hdr;
	Msg_Prot_Machine_Status_Request_t		Info;
}
	Msg_Prot_Machine_Status_Request_Msg_t;

typedef struct
{
	INT_16  Status_Msg_ID;

	INT_16	Act_1_Data;
	INT_16	Act_2_Data;
	INT_16	Act_3_Data;
	INT_16	Act_4_Data;
	INT_16	Act_5_Data;
	INT_16	IO_1_Data;
	INT_16	IO_2_Data;
	INT_16	IO_3_Data;
	INT_16	Servo_Ind_Data;

}
	Msg_Prot_Machine_Status_Reply_t;

typedef struct
{
	Message_Header_t						Msg_Hdr;
	Msg_Prot_Machine_Status_Reply_t			Machine_Status;
}
	Msg_Prot_Machine_Status_Reply_Msg_t;

typedef struct
{
    UINT_16  Status_Msg_ID;
	INT_16	Mode;
	INT_16	Time_Period;
}
	Msg_Prot_TTS_Status_Request_t;

typedef struct
{
	Message_Header_t					Msg_Hdr;
	Msg_Prot_TTS_Status_Request_t		Info;
}
	Msg_Prot_TTS_Status_Request_Msg_t;

typedef struct
{
	INT_16  Status_Msg_ID;

	INT_16	Act_1_Data;
    INT_16	Act_2_Data;
	INT_16	IO_1_Data;
	}
	Msg_Prot_TTS_Status_Reply_t;

typedef struct
{
	Message_Header_t						Msg_Hdr;
	Msg_Prot_TTS_Status_Reply_t             TTS_Status;
}
	Msg_Prot_TTS_Status_Reply_Msg_t;

typedef struct
{
		INT_16		Profile_Num;
		INT_16		Info[MSG_PROT_PROFILE_MAX_DATA_SIZE];
}
	Msg_Prot_Profile_Info_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_Profile_Info_t			Profile_info;
}
	Msg_Prot_Profile_Info_Msg_t;

typedef struct
{

	Message_Header_t			Msg_Hdr;

}
	Msg_Prot_Profile_Info_Req_Msg_t;

typedef struct
{
	INT_16 						Position;		 //ONS_DOWN (0) or ONS_UP (1)
	INT_16						Value;			 //APF position in steps (for APF only)
}
	Msg_Prot_Set_APF_Position_t;

typedef struct
{
	Message_Header_t					Msg_Hdr;
	Msg_Prot_Set_APF_Position_t			APF;
}
	Msg_Prot_Set_APF_Position_Msg_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;

}
	Msg_Prot_Manual_Cat_Msg_t;


typedef struct
{
	Message_Header_t			Msg_Hdr;

}
	Msg_Prot_Quick_Stop_Msg_t;

typedef struct
{
	UINT_16	Update_Data_Mask;
	UINT_16	APF_Accel_Table_0;
	UINT_16	APF_Accel_Table_1;
	UINT_16	APF_Accel_Table_2;
	UINT_16	APF_Accel_Table_3;
	UINT_16	APF_Accel_Table_4;
	UINT_16	APF_Accel_Table_5;
	UINT_16	APF_Accel_Table_6;
	UINT_16	APF_Accel_Table_7;
	UINT_16	APF_Accel_Table_8;
	UINT_16	APF_Accel_Table_9;
	UINT_16	PFS_Check_Lost_Position;
	UINT_16	PFS_Check_Position_Offset;
	UINT_16	PFS_Check_Position_Repeat;
    UINT_16	UT_Welder_Timeout;

}
	Msg_Prot_Profile_7_Data_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_Profile_7_Data_t		RTC_Profile_7_Data;
}
	Msg_Prot_Update_Profile_7_Msg_t;
//-------------------------------------------------------dec31,2019.
// 3020.
typedef struct
{
	UINT_16 Update_Data_Mask;
	UINT_16 APF_Accel_Table_0;
	UINT_16 APF_Accel_Table_1;
	UINT_16 APF_Accel_Table_2;
	UINT_16 APF_Accel_Table_3;
	UINT_16 APF_Accel_Table_4;
	UINT_16 APF_Accel_Table_5;
	UINT_16 APF_Accel_Table_6;
	UINT_16 APF_Accel_Table_7;
	UINT_16 APF_Accel_Table_8;
	UINT_16 APF_Accel_Table_9;
	UINT_16 PFS_Check_Lost_Position;
	UINT_16 PFS_Check_Position_Offset;
	UINT_16 PFS_Check_Position_Repeat;
    UINT_16 UT_Welder_Timeout;
	UINT_16 Manual_Cut_RPM_Fast;
	UINT_16 APF_Before_Wiper_Enable;
}
	Msg_Prot_Profile_7_3020_Data_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_Profile_7_3020_Data_t		RTC_Profile_7_3020_Data;
}
	Msg_Prot_Update_Profile_7_3020_Msg_t;

//-------------------------------------------------------dec31,2019.
typedef struct
{
	UINT_16	Update_Data_Mask;
	INT_16  Lamp_Enable;
	INT_16  Lamp_Blink_Fast_On_Time;
	INT_16  Lamp_Blink_Fast_Off_Time;
	INT_16  Lamp_Blink_Mid_On_Time;
	INT_16  Lamp_Blink_Mid_Off_Time;
	INT_16  Lamp_Blink_Slow_On_Time;
	INT_16  Lamp_Blink_Slow_Off_Time;
	INT_16	Bobbin_Counter_Time_Period_to_Check;
	INT_16	Bobbin_Counter_Maximal_Change_For_Stop;
	INT_16	Winder_Counter_Time_Period_to_Check;
	INT_16	Winder_Counter_Minimal_Change_For_Run;
	INT_16	Winder_Counter_Maximal_Change_For_Stop;
	INT_16	Thread_Counter_Time_Period_to_Check;
	INT_16	Thread_Counter_Maximal_Change_For_Stop;
	INT_16  Sensor_Enable_UT_Welder_Up_Sensor;
	INT_16  Sensor_Enable_UT_Welder_Down_Sensor;
}
	Msg_Prot_Profile_8_Data_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_Profile_8_Data_t		RTC_Profile_8_Data;
}
	Msg_Prot_Update_Profile_8_Msg_t;


typedef struct
{
	UINT_16	Update_Data_Mask;
	INT_16	Tension_PWM_Divider_Factor;
	INT_16	Tension_PWM_Period_In_uSec;
	INT_16	Tension_Max_ED_Percentage;
	INT_16	Tension_Min_ED_Percentage;
	INT_16  Transition_Tension;
	INT_16	Idle_Tension;
	INT_16	Transition_Delay;
	INT_16	Idle_Timeout;
	INT_16	Thread_Tension_Exist;
	INT_16	Bobbin_Counter_Exist;
	INT_16	Winder_Counter_Exist;
	INT_16	Thread_Counter_Exist;
	INT_16  Tension_Min_Transition_Delay;
}	
	Msg_Prot_Profile_9_Data_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_Profile_9_Data_t		RTC_Profile_9_Data;
}
	Msg_Prot_Update_Profile_9_Msg_t;

//-------------------------------------------------------dec31,2019.
// 3020. 18items.
typedef struct
{
	UINT_16	Update_Data_Mask;
	INT_16	Tension_PWM_Divider_Factor;
	INT_16	Tension_PWM_Period_In_uSec;
	INT_16	Tension_Max_ED_Percentage;
	INT_16	Tension_Min_ED_Percentage;
	INT_16  Transition_Tension;
	INT_16	Idle_Tension;
	INT_16	Transition_Delay;
	INT_16	Idle_Timeout;
	INT_16	Thread_Tension_Exist;
	INT_16	Bobbin_Counter_Exist;
	INT_16	Winder_Counter_Exist;
	INT_16	Thread_Counter_Exist;
	INT_16  Tension_Min_Transition_Delay;
	INT_16	Wiper_In_Delay;
	INT_16	Wiper_Out_Delay;
	INT_16	Stop_RPM_Fast;
	INT_16  TX_04;	
}
	Msg_Prot_Profile_9_3020_Data_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_Profile_9_3020_Data_t		RTC_Profile_9_3020_Data;
}
	Msg_Prot_Update_Profile_9_3020_Msg_t;

//-------------------------------------------------------dec31,2019.


typedef struct
{
	UINT_16	Update_Data_Mask;
//	UINT_16	APF_Accel_Table_48;
//	UINT_16	APF_Accel_Table_49;
	INT_16	APF_Default_State;
	INT_16	PFS_Positive_Dir;
	UINT_16	APF_Init_PFS_Position;
	UINT_16	APF_Lock_Delay;
	UINT_16	APF_Direction_Change_Delay;
	INT_16	APF_Timer_Input_Prescale;
	UINT_16	APF_Min_DT_Value;
	UINT_16	APF_Max_DT_Value;
	UINT_16	APF_ISR_Time;
	UINT_16	APF_Accel_Steps;
	UINT_16	APF_Steps_Repeat;
	INT_16	APF_Lock_Polarity;
	INT_16	Wiper_Exist;

}
	Msg_Prot_Profile_10_Data_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_Profile_10_Data_t		RTC_Profile_10_Data;
}
	Msg_Prot_Update_Profile_10_Msg_t;

//-------------------------------------------------------dec31,2019.
// 3020. 18items.
typedef struct
{
	UINT_16	Update_Data_Mask;
	INT_16	APF_Default_State;
	INT_16	PFS_Positive_Dir;
	UINT_16	APF_Init_PFS_Position;
	UINT_16	APF_Lock_Delay;
	UINT_16	APF_Direction_Change_Delay;
	INT_16	APF_Timer_Input_Prescale;
	UINT_16	APF_Min_DT_Value;
	UINT_16	APF_Max_DT_Value;
	UINT_16	APF_ISR_Time;
	UINT_16	APF_Accel_Steps;
	UINT_16	APF_Steps_Repeat;
	INT_16	APF_Lock_Polarity;
	INT_16	Wiper_Exist;
	INT_16	Verify_Unloading;
}
	Msg_Prot_Profile_10_3020_Data_t;

typedef struct
{
	Message_Header_t					Msg_Hdr;
	Msg_Prot_Profile_10_3020_Data_t		RTC_Profile_10_3020_Data;
}
	Msg_Prot_Update_Profile_10_3020_Msg_t;

//-------------------------------------------------------dec31,2019.

typedef struct
{
	UINT_16	Update_Data_Mask;
	INT_16	IO_Port_1;
	INT_16	IO_Port_2;
	INT_16	IO_Port_3;
	INT_16	IO_Port_4;
	INT_16	IO_Port_5;
	INT_16	IO_Port_6;
	INT_16	IO_Port_7;
	INT_16	IO_Port_8;
	INT_16	IO_Port_9;
	INT_16	IO_Port_10;
	INT_16	IO_Port_11;
	INT_16	IO_Port_12;
	INT_16	IO_Port_13;
	INT_16	IO_Port_14;
	INT_16	IO_Port_15;
	INT_16	IO_Port_16;
}
	Msg_Prot_Profile_11_Data_t;

typedef struct
{
	Message_Header_t			 	Msg_Hdr;
	Msg_Prot_Profile_11_Data_t		RTC_Profile_11_Data;
}
	Msg_Prot_Update_Profile_11_Msg_t;

typedef struct
{
	UINT_16	Update_Data_Mask;
	INT_16	Sensor_Enable_X_Arm_Far_Sensor;
	INT_16	Sensor_Enable_X_Arm_Near_Sensor;
	INT_16	Sensor_Enable_Y_Arm_Far_Sensor;
	INT_16	Sensor_Enable_Y_Arm_Near_Sensor;
	INT_16	Sensor_Enable_Z_Arm_Up_Sensor;
	INT_16	Sensor_Enable_Z_Arm_Down_Sensor;
	INT_16	Sensor_Enable_XL_Sensor;
	INT_16	Sensor_Enable_Air_Fan_Sensor;
	INT_16	Sensor_Enable_Pallet_Sensor;
	INT_16	Sensor_Enable_Sew_Pedal_Sensor;
	INT_16	Sensor_Enable_Lock_Pedal_Left_Sensor;
	INT_16	Sensor_Enable_Lock_Pedal_Right_Sensor;
	INT_16	Sensor_Enable_Air_Pressure_Sensor;
	INT_16	Sensor_Enable_Loader_Safety_Key_Sensor;
	INT_16	Sensor_Enable_Cover_Safety_Key_Sensor;
	INT_16  Sensor_Enable_Pallet_Cover_Open_Sensor;
}
	Msg_Prot_Profile_12_Data_t;

typedef struct
{
	Message_Header_t			 	Msg_Hdr;
	Msg_Prot_Profile_12_Data_t		RTC_Profile_12_Data;
}
	Msg_Prot_Update_Profile_12_Msg_t;

typedef struct
{
	UINT_16	Update_Data_Mask;
	INT_16	APedal_A2D_Start;
	INT_16	APedal_A2D_Stop;
	INT_16	APedal_A2D_Lock;
	INT_16	APF_Position_Clamp_Open;
	INT_16	APF_Position_Clamp_Close;
	INT_16	APF_Clamp_Move_Dt_S;
	INT_16	Minimal_Time_Between_Pedal_Reads;
	INT_16	Minimal_Time_Between_Pedal_Checks;
	INT_16	Minimal_Distance_In_Pedal_Level;
	INT_16	Minimal_Time_Between_Clamp_Moves;
	INT_16	Minimal_Clamp_Move;
	INT_16	Sensor_Enable_Upper_Cover_Close_Sensor;
	INT_16	Sensor_Enable_Upper_Cover_Open_Sensor;
    INT_16  Sensor_Enable_X_Index_Sensor;
    INT_16  Sensor_Enable_Y_Index_Sensor;
    INT_16  Sensor_Enable_Z_Index_Sensor;
}
	Msg_Prot_Profile_13_Data_t;

typedef struct
{
	Message_Header_t			 	Msg_Hdr;
	Msg_Prot_Profile_13_Data_t		RTC_Profile_13_Data;
}
	Msg_Prot_Update_Profile_13_Msg_t;

typedef struct
{
	UINT_16	Update_Data_Mask;
	INT_16	XC_Sensor_On;
	INT_16	XH_Sensor_On;
	INT_16	YO_Sensor_On;
	INT_16	YI_Sensor_On;
	INT_16	CF_Sensor_On;
	INT_16	CB_Sensor_On;
	INT_16	BD_Sensor_On;
	INT_16	Ignore_No_Bobbin;
	UINT_16	XC_Sensor_Delay;
	UINT_16	XH_Sensor_Delay;
	UINT_16	YO_Sensor_Delay;
	UINT_16	YI_Sensor_Delay;
	UINT_16	CF_Sensor_Delay;
	UINT_16	CB_Sensor_Delay;
	UINT_16  BD_Sensor_Delay;
	UINT_16  JAW_Cylinder_Delay;
}
	Msg_Prot_Profile_14_Data_t;

typedef struct
{
	Message_Header_t			 	Msg_Hdr;
	Msg_Prot_Profile_14_Data_t		RTC_Profile_14_Data;
}
	Msg_Prot_Update_Profile_14_Msg_t;



typedef struct
{
	INT_16	Entity_Id;
	INT_16	Entity_Value;
}
	Msg_Prot_Entity_Data_t;

typedef struct
{
	Msg_Prot_Entity_Data_t	Entity[MSG_PROT_MAX_NUM_OF_ENTITY_IN_LIST];
}
	Msg_Prot_Entity_List_t;

typedef struct
{
	Message_Header_t			 	Msg_Hdr;
	Msg_Prot_Entity_List_t			Entity_List;
}
	Msg_Prot_Entity_Data_Set_Msg_t;

typedef struct
{
	Message_Header_t			 	Msg_Hdr;
	Msg_Prot_Entity_Data_t			Entity_State;
}
	Msg_Prot_Entity_State_Msg_t;
typedef struct
{
	Message_Header_t			 	Msg_Hdr;
	INT_16							Entity_Id;
}
	Msg_Prot_Entity_State_Req_Msg_t;

typedef struct
{
	Message_Header_t			 	Msg_Hdr;
	INT_16							Alarm_State;
}
	Msg_Prot_Alarm_State_Msg_t;

typedef struct
{
	Message_Header_t			 	Msg_Hdr;
	INT_16							Tension_Value;
}
	Msg_Prot_Set_Tension_Msg_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	INT_16						Alarm_Mask;
}
	Msg_Prot_Reset_Alarm_Msg_t;

typedef struct
{

	INT_16		X_pos;
	INT_16		Y_pos;
}
	Msg_Prot_Pos_XY_t;

typedef struct
{
	Message_Header_t	Msg_Hdr;
	Msg_Prot_Pos_XY_t	Position;
}
	Msg_Prot_RTC_Load_Pos_XY_Msg_t;

typedef struct
{
	Message_Header_t			 	Msg_Hdr;
	INT_16							State;
}
	Msg_Prot_RTC_Load_Pos_XY_Response_Msg_t;

typedef struct
{

	INT_16		Mode;
	INT_16		Level;
}

	Msg_Prot_Servo_Clamp_Cmd_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	Msg_Prot_Servo_Clamp_Cmd_t	Command;
}
	Msg_Prot_Servo_Clamp_Cmd_Msg_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	int							Config_Data;
}
	Msg_Prot_RTC_Config_Data_Msg_t;

typedef struct
{
	unsigned char   IO_Num[MSG_PROT_MAX_NUM_OF_ID_IN_IO_LIST];
	char			Start;
	char			End;
}
	Msg_Prot_IO_List_Init_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	Msg_Prot_IO_List_Init_t		IO_List;
}
	Msg_Prot_IO_List_Init_Msg_t;

typedef struct
{
	UINT_16   IO_List_Values_1;
	UINT_16   IO_List_Values_2;
	UINT_16   IO_List_Values_3;
	UINT_16   IO_List_Values_4;
	UINT_16   IO_List_Values_5;
	UINT_16   IO_List_Values_6;
	UINT_16   IO_List_Values_7;
	UINT_16   IO_List_Values_8;
}
	Msg_Prot_IO_List_Values_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	Msg_Prot_IO_List_Values_t	RTC_Values;
}
	Msg_Prot_IO_List_Values_Msg_t;

typedef struct
{
	INT_16   Reply_Mode;
	UINT_16   Time_Period;

}
	Msg_Prot_IO_List_Status_Req_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_IO_List_Status_Req_t	IO_List_Status_Req;
}
	Msg_Prot_IO_List_Status_Req_Msg_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	INT_16						Lamp_Command;
}
	Msg_Prot_Lamp_Command_Msg_t;

typedef struct
{
	INT_16		Enable_State;
	INT_16		Alarm_Mask;
}
	Msg_Prot_Alarm_Enable_State_t;

typedef struct
{
	Message_Header_t			    Msg_Hdr;
	Msg_Prot_Alarm_Enable_State_t	Alarm_Enable_State;
}
	Msg_Prot_Alarm_Enable_State_Msg_t;

typedef struct
{
	INT_16	Mode;
	INT_16	Time_Period;
	UINT_16 Status_Msg_ID;

}
	Msg_Prot_Machine_Info_Request_t;

typedef struct
{
	Message_Header_t					Msg_Hdr;
	Msg_Prot_Machine_Info_Request_t		Info;
}
	Msg_Prot_Machine_Info_Request_Msg_t;

typedef struct
{
	INT_16  Counter_Command;
	INT_16  Counter_Command_Value;
}
	Msg_Prot_Counter_Data_t;

typedef enum
{
    BOBBIN_SPOOL_COUNTER,
    WINDER_SPOOL_COUNTER,
    THREAD_SPOOL_COUNTER
}
	Msg_Prot_Counter_List_t;
    
typedef enum
{
    SPOOL_COUNTER_NO_COMMAND,
    SPOOL_COUNTER_ENABLE,
    SPOOL_COUNTER_DISABLE,
    SPOOL_COUNTER_RESET,
    SPOOL_COUNTER_SENSING_ON,
    SPOOL_COUNTER_SENSING_OFF
}
	Msg_Prot_Counter_Command_t;

typedef enum
{
	SPOOL_COUNTER_STATE_IDLE,
	SPOOL_COUNTER_STATE_RUN,
	SPOOL_COUNTER_STATE_STOP
}
	Msg_Prot_Counter_State_t;

typedef struct
{
	INT_16  Status_Msg_ID;

	INT_16	Spool_Counters_Status;
	INT_16	Bobbin_Counter_Value;
	INT_16	Winder_Counter_Value;
	INT_16	Thread_Counter_Value;
	INT_16	Tension_Value;
	INT_16	Bobbin_Changer_Status;
	INT_16	Bobbin_Changer_Error_Code;
	INT_16	Bobbin_Changer_Step;
	INT_16  Z_Servo_Pos;
}
	Msg_Prot_Machine_Info_Reply_t;

typedef struct
{
	Message_Header_t						Msg_Hdr;
	Msg_Prot_Machine_Info_Reply_t			Machine_Info;
}
	Msg_Prot_Machine_Info_Reply_Msg_t;

typedef struct
{
	INT_16  Command; 
	INT_16	Command_Value;
}
	Spool_Countrs_Cmd_t;

typedef struct
{
	Spool_Countrs_Cmd_t			Bobbin_Counter_Cmd;
	Spool_Countrs_Cmd_t			Winder_Counter_Cmd;
	Spool_Countrs_Cmd_t			Thread_Counter_Cmd;
}
	Msg_Prot_Spool_Countrs_Cmd_t;

typedef struct
{
	Message_Header_t						Msg_Hdr;
	Msg_Prot_Spool_Countrs_Cmd_t			Spool_Counters_Cmd;
}
	Msg_Prot_Spool_Countrs_Cmd_Msg_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	INT_16						RPM_Speed;
}
	Msg_Prot_RPM_Command_Msg_t;

typedef struct
{
	Message_Header_t			Msg_Hdr;
	INT_16						IO_Latch_Mode_Active;
}
	Msg_Prot_Latch_Mode_Command_Msg_t;

typedef struct
{

	INT_16		X_pos;
	INT_16		Y_pos;
	INT_16		Dt_X;
	INT_16		Dt_Y;

}
	Msg_Prot_RTC_Move_X_Y_STC_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_RTC_Move_X_Y_STC_t		Info;
}
	Msg_Prot_RTC_Move_X_Y_STC_Msg_t;

typedef struct
{
	INT_16				Command_Type;
}
	Msg_Prot_Bobbin_Changer_Cmd_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_Bobbin_Changer_Cmd_t	Command;
}
	Msg_Prot_Bobbin_Changer_Cmd_Msg_t;

typedef enum
{
	BOBBIN_CHANGER_BUSY			=	0,
	BOBBIN_CHANGER_READY		=	1,
	BOBBIN_CHANGER_PAUSE		=	2,
	BOBBIN_CHANGER_ERROR		=	3
}
	Msg_Prot_Bobbin_Changer_State_t;

typedef enum
{
	BOBBIN_CHANGER_FAULT_SUCCESS						=	0,
	BOBBIN_CHANGER_FAULT_NO_FREE_SLOT_TO_UNLOAD			=	1,
	BOBBIN_CHANGER_FAULT_NO_BOBBIN_TO_LOAD				=	2,
	BOBBIN_CHANGER_FAULT_WARN_UNLOAD_NO_BOBBIN			=	3,
	BOBBIN_CHANGER_FAULT_CRITICAL_ERROR					=	4
}
	Msg_Prot_Bobbin_Changer_Fault_Code_t;



typedef enum
{
	BOBBIN_CHANGER_RESET_CYCLE			= 0,
	BOBBIN_CHANGER_ACTIVATE_CYCLE		= 1,
	BOBBIN_CHANGER_RESUME_CYCLE			= 2,
	BOBBIN_CHANGER_STOP_CYCLE			= 3,
	BOBBIN_CHANGER_VERIFY_EMPTY_SLOT	= 4,
	BOBBIN_CHANGER_STEP_MODE_OFF		= 5,
	BOBBIN_CHANGER_STEP_MODE_ON			= 6,
}
	Msg_Prot_Bobbin_Changer_Command_Code_t;

typedef enum
{
	APF_LOCK		= 0,
	APF_UNLOCK		= 1
}
	Msg_Prot_APF_Lock_State;

typedef struct
{

	Message_Header_t			Msg_Hdr;
	INT_16						APF_Lock_State;
}
	Msg_Prot_APF_Lock_Msg_t;

typedef enum
{
	SH_ROTATE_CW_DIR		= 0,
	SH_ROTATE_CCW_DIR		= 1,
}
	Msg_Prot_SH_Rotation_Direction_t;

typedef struct
{
	INT_16 RPM;
	INT_16 Direction;
	INT_16 Distance;
}
	Msg_Prot_Rotate_SH_To_Dir_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_Rotate_SH_To_Dir_t		Data;
}
	Msg_Prot_Rotate_SH_To_Dir_Msg_t;

typedef struct
{
	INT_16 EntityId;
	INT_16 OneShotTime;
}
Msg_Prot_Entity_OneShot_t;

typedef struct
{
	Message_Header_t				Msg_Hdr;
	Msg_Prot_Entity_OneShot_t		Data;
}
Msg_Prot_Entity_OneShot_Msg_t;

typedef struct
{
	char          status;
}
Msg_Prot_Entity_OneShot_Fbk_t;
//------------------
//   Prototypes
//------------------

// Init Message
void	Msg_Prot_Init (void);

// Send Message
int		Msg_Prot_Send_Message (ONS_BYTE* Mgs_Data_Buff, unsigned int Msg_Id, unsigned int Msg_Data_Size);

// Receive Message
int		Msg_Prot_Receive_Next_Message (Rcv_Msg_Data_t Data_Buff, unsigned int* Msg_Id, unsigned int* New_Msg);
void	Msg_Prot_Get_Last_Msg_Hdr (int* Msg_Id,unsigned long* Msg_SN, int* Msg_Size, unsigned long* Msg_Time );

// For Testing
int 	Msg_Prot_Pack_n_Tx_Host_Tst_Msg(int* Wait, int* Num_Of_Msg, int*  Delta_Time, int* Return_Size,int* Fill_Size,unsigned long* Tx_Time);
int 	Msg_Prot_Unpack_Host_Test_Message(ONS_BYTE* Msg_Buff, Msg_Prot_Host_Tst_Msg_info_t* Tst_Info);

int 	Msg_Prot_Pack_n_Tx_RTC_Tst_Msg(unsigned long Origin_Msg_SN, int Return_Size);
int 	Msg_Prot_Unpack_RTC_Test_Message(ONS_BYTE* Msg_Buff, Msg_Prot_RTC_Tst_Hdr_t* Tst_Info);

int		Msg_Prot_Pack_n_Tx_Ping_Pong_Msg(Ping_Initiator_t Ping_Initiator, int Initiator_Msg_Id, int Data_1, int Data_2, int Data_3, int Data_4, int Data_5, int Data_6, int Data_7);
int		Msg_Prot_Unpack_Ping_Pong_Msg(ONS_BYTE* Msg_Buff, int* Time, Ping_Initiator_t* Ping_Initiator, int* Initiator_Msg_Id, int* Data_1, int* Data_2, int* Data_3, int* Data_4, int* Data_5, int* Data_6, int* Data_7);

// Stitch Data
int		Msg_Prot_Pack_n_Tx_Next_Stitch_data(RTC_Stitch_t Stitch_Data, int Flush_Buff);
int		Msg_Prot_Unpack_Next_Stitch_data(ONS_BYTE* Msg_Buff, RTC_Stitch_t* Stitch_Data, int* Flush_Buff);

// Status
int 	Msg_Prot_Pack_n_Tx_RTC_Status(int Stitch_ID,int Current_RPM, int Current_X_Pos, int Current_Y_Pos, int Target_RPM, int Target_X_Pos, int Target_Y_Pos, int XY_Moving, int Sew_Head_Rotating, int RTC_State, RTC_Action_Start_Report_t Action_Started, int Buff_Stitches_Num, int HW_State, ONS_RTC_Status_Error_type_t Error_Code, int Reason_Code);
int 	Msg_Prot_Unpack_RTC_Status(ONS_BYTE* Msg_Buff,int* Stitch_ID,int* Current_RPM, int* Current_X_Pos, int* Current_Y_Pos, int* Target_RPM, int* Target_X_Pos, int* Target_Y_Pos, int* XY_Moving, int* Sew_Head_Rotating, int* RTC_State, RTC_Action_Start_Report_t* Action_Started, int* Buff_Stitches_Num, int* HW_State, ONS_RTC_Status_Error_type_t* Error_Code, int* Reason_Code);

// RUN
int 	Msg_Prot_Pack_n_Tx_RTC_RUN(int Mode, unsigned int Delay, int Direction, int APF_Move);
int 	Msg_Prot_Unpack_RTC_RUN(ONS_BYTE* Msg_Buff, int *Mode, unsigned int *Delay, int* Direction, int* APF_Move);

// Error
int 	Msg_Prot_Pack_n_Tx_RTC_Error(int  Error_Code, char* Error_Data);
int  	Msg_Prot_Unpack_RTC_Error(ONS_BYTE* Msg_Buff, int  *Error_Code, char* Error_Data);

// Move XY
int 	Msg_Prot_Pack_n_Tx_RTC_Move_X_Y(int  X_Pos, int Y_pos, int Scale_X, int Scale_Y);
int  	Msg_Prot_Unpack_RTC_Move_X_Y(ONS_BYTE* Msg_Buff, int*  X_Pos, int* Y_Pos, int* Scale_X, int* Scale_Y);

// Home
int Msg_Prot_Pack_n_Tx_Home_Mode(Msg_Prot_Home_Mode_t Home_Mode, Msg_Prot_Home_Z_Direction_t Home_Z_Direction);
int  	Msg_Prot_Unpack_Home_Mode(ONS_BYTE* Msg_Buff, Msg_Prot_Home_Mode_t* Home_Mode, Msg_Prot_Home_Z_Direction_t* Home_Z_Direction);

//jan09,2019.
int Msg_Prot_Pack_HomeMode_3020(Msg_Prot_Home_Mode_t Home_Mode, Msg_Prot_Home_Z_Direction_t Home_Z_Direction,int VAL_1,int VAL_2);



int 	Msg_Prot_Pack_n_Tx_RTC_Home_Status(RTC_State_t	RTC_Home_Mode, int X_Pos, int Y_Pos, int XY_Moving, int Sew_Head_Rotating, RTC_Home_Result_t Home_Res, int Error_Code);
int  	Msg_Prot_Unpack_RTC_Home_Status(ONS_BYTE* Msg_Buff, RTC_State_t* RTC_Home_Mode, int* X_Pos, int* Y_Pos, int* XY_Moving, int* Sew_Head_Rotating, RTC_Home_Result_t* Home_Res, int* Error_Code);

// RTC Dump
int 	Msg_Prot_Pack_n_Tx_RTC_Dump(int  Dump_Type, int Info_Size, Msg_Prot_RTC_Dump_Data_t* Dump_Data);
int  	Msg_Prot_Unpack_RTC_Dump(ONS_BYTE* Msg_Buff, int* Dump_Type, int* Info_Size, Msg_Prot_RTC_Dump_Data_t* Dump_Data);
int		Msg_Prot_Pack_n_Tx_RTC_Dump_Req( void );

//IO Operation
int 	Msg_Prot_Pack_n_Tx_IO_Act_Cmd(int Num_Of_IO_CMD, Msg_Prot_IO_Act_t* IO_Act_Data);
int  	Msg_Prot_Unpack_IO_Act_Cmd(ONS_BYTE* Msg_Buff,int* Num_Of_CMD, Msg_Prot_IO_Act_t* IO_Act_Data);

int 	Msg_Prot_Pack_n_Tx_Req_IO_Act_State(int Num_Of_IO_CMD, Msg_Prot_IO_Act_t* IO_Act_Data);
int 	Msg_Prot_Unpack_Req_IO_Act_State(ONS_BYTE* Msg_Buff,int* Num_Of_Req, Msg_Prot_IO_Act_t* IO_Act_Data);

int 	Msg_Prot_Pack_n_Tx_IO_Act_State(int Num_Of_Status, Msg_Prot_IO_Act_t* IO_Act_Data);
int 	Msg_Prot_Unpack_IO_Act_State(ONS_BYTE* Msg_Buff,int* num_of_status, Msg_Prot_IO_Act_t* IO_Act_Data);

//RTC debug data
int 	Msg_Prot_Pack_n_Tx_Debug_Data_Msg(char* Debug_Data);
int 	Msg_Prot_Unpack_Debug_Data_Msg(ONS_BYTE* Msg_Buff, char* Debug_Data);

// Protocol
int		Msg_Prot_Pack_n_Tx_Protocol_Validation_Req ( void );
int     Msg_Prot_Pack_n_Tx_Protocol_Validation_Status ( int RTC_Base_Ver , int RTC_Major_Ver, int RTC_Minor_Ver);
int		Msg_Prot_Unpack_Protocol_Validation_Status(ONS_BYTE* Msg_Buff, int* RTC_Base_Ver, int* RTC_Major_Ver, int* RTC_Minor_Ver, int* RTC_Msg_Prot_Base_Ver, int* RTC_Msg_Prot_Major_Ver, int* RTC_Msg_Prot_Minor_Ver);

// Lock SH State
int		Msg_Prot_Pack_n_Tx_Lock_SH_State(SH_UP_Pos_t State);
int		Msg_Prot_Unpack_Lock_SH_State(ONS_BYTE* Msg_Buff,SH_UP_Pos_t* State);
int		Msg_Prot_Pack_n_Tx_Lock_SH_State3020(SH_UP_Pos_t State,int Value);

// Update profile 
int		Msg_Prot_Pack_n_Tx_Update_Profile_1 ( Msg_Prot_Profile_1_Data_t  Profile_Data);
int		Msg_Prot_Unpack_Update_Profile_1 (ONS_BYTE* Msg_Buff,Msg_Prot_Profile_1_Data_t* Profile_1_Data);

int		Msg_Prot_Pack_n_Tx_Update_Profile_2 ( Msg_Prot_Profile_2_Data_t  Profile_Data);
int		Msg_Prot_Unpack_Update_Profile_2 (ONS_BYTE* Msg_Buff,Msg_Prot_Profile_2_Data_t* Profile_2_Data);

int		Msg_Prot_Pack_n_Tx_Update_Profile_3(Msg_Prot_Profile_3_Data_t  Profile_Data);
int		Msg_Prot_Unpack_Update_Profile_3(ONS_BYTE* Msg_Buff, Msg_Prot_Profile_3_Data_t* Profile_3_Data);

int		Msg_Prot_Pack_n_Tx_Update_Profile_4(Msg_Prot_Profile_4_Data_t  Profile_Data);
int		Msg_Prot_Unpack_Update_Profile_4(ONS_BYTE* Msg_Buff, Msg_Prot_Profile_4_Data_t* Profile_4_Data);

// dec31, 2019. ons3020.
int		Msg_Prot_Pack_n_Tx_Update_Profile_4_3020(Msg_Prot_Profile_4_3020_Data_t  Profile_Data);
// dec31, 2019. ons3020.


int		Msg_Prot_Pack_n_Tx_Update_Profile_5(Msg_Prot_Profile_5_Data_t  Profile_Data);
int		Msg_Prot_Unpack_Update_Profile_5(ONS_BYTE* Msg_Buff, Msg_Prot_Profile_5_Data_t* Profile_5_Data);

int		Msg_Prot_Pack_n_Tx_Update_Profile_6(Msg_Prot_Profile_6_Data_t  Profile_Data);
int		Msg_Prot_Unpack_Update_Profile_6(ONS_BYTE* Msg_Buff, Msg_Prot_Profile_6_Data_t* Profile_6_Data);

int		Msg_Prot_Pack_n_Tx_Update_Profile_7(Msg_Prot_Profile_7_Data_t  Profile_Data);
int		Msg_Prot_Unpack_Update_Profile_7(ONS_BYTE* Msg_Buff, Msg_Prot_Profile_7_Data_t* Profile_7_Data);

// dec31, 2019. ons3020.
int		Msg_Prot_Pack_n_Tx_Update_Profile_7_3020(Msg_Prot_Profile_7_3020_Data_t  Profile_Data);
// dec31, 2019. ons3020.

int		Msg_Prot_Pack_n_Tx_Update_Profile_8(Msg_Prot_Profile_8_Data_t  Profile_Data);
int		Msg_Prot_Unpack_Update_Profile_8(ONS_BYTE* Msg_Buff, Msg_Prot_Profile_8_Data_t* Profile_8_Data);

int		Msg_Prot_Pack_n_Tx_Update_Profile_9(Msg_Prot_Profile_9_Data_t  Profile_Data);
int		Msg_Prot_Unpack_Update_Profile_9(ONS_BYTE* Msg_Buff, Msg_Prot_Profile_9_Data_t* Profile_9_Data);

// dec31, 2019. ons3020.
int		Msg_Prot_Pack_n_Tx_Update_Profile_9_3020(Msg_Prot_Profile_9_3020_Data_t  Profile_Data);
// dec31, 2019. ons3020.

int		Msg_Prot_Pack_n_Tx_Update_Profile_10(Msg_Prot_Profile_10_Data_t  Profile_Data);
int		Msg_Prot_Unpack_Update_Profile_10(ONS_BYTE* Msg_Buff, Msg_Prot_Profile_10_Data_t* Profile_10_Data);

// dec31, 2019. ons3020.
int		Msg_Prot_Pack_n_Tx_Update_Profile_10_3020(Msg_Prot_Profile_10_3020_Data_t  Profile_Data);
// dec31, 2019. ons3020.


int		Msg_Prot_Pack_n_Tx_Update_Profile_11(Msg_Prot_Profile_11_Data_t  Profile_Data);
int		Msg_Prot_Unpack_Update_Profile_11(ONS_BYTE* Msg_Buff, Msg_Prot_Profile_11_Data_t* Profile_11_Data);

int		Msg_Prot_Pack_n_Tx_Update_Profile_12(Msg_Prot_Profile_12_Data_t  Profile_Data);
int		Msg_Prot_Unpack_Update_Profile_12(ONS_BYTE* Msg_Buff, Msg_Prot_Profile_12_Data_t* Profile_12_Data);

int		Msg_Prot_Pack_n_Tx_Update_Profile_13(Msg_Prot_Profile_13_Data_t  Profile_Data);
int		Msg_Prot_Unpack_Update_Profile_13(ONS_BYTE* Msg_Buff, Msg_Prot_Profile_13_Data_t* Profile_13_Data);

int		Msg_Prot_Pack_n_Tx_Update_Profile_14(Msg_Prot_Profile_14_Data_t  Profile_Data);
int		Msg_Prot_Unpack_Update_Profile_14(ONS_BYTE* Msg_Buff, Msg_Prot_Profile_14_Data_t* Profile_14_Data);

int		Msg_Prot_Pack_n_Tx_Profile_Update_Status(int Profile_Type_Num, ONS_Profile_Update_Status Status);
int		Msg_Prot_Unpack_Profile_Update_Status(ONS_BYTE* Msg_Buff,int* Profile_Type_Num, ONS_Profile_Update_Status* Profile_Update_Status);

// Lock/Unlock XY Pos
int		Msg_Prot_Pack_n_Tx_Lock_XY_Pos(XY_Lock_State_t State);
int		Msg_Prot_Unpack_Lock_XY_Pos(ONS_BYTE* Msg_Buff, XY_Lock_State_t* State);

// INIT Req
int		Msg_Prot_Pack_n_Tx_Preform_INIT_Req (void);
int		Msg_Prot_Pack_n_Tx_RTC_Init_Status ( Msg_Prot_RTC_Init_Status_t Status);
int		Msg_Prot_Unpack_RTC_Init_Status ( ONS_BYTE* Msg_Buff,INT_16* Status);

// Machine Status
int		Msg_Prot_Pack_n_Tx_Machine_Status_Request(Status_Reply_Mode_t Reply_Mode, int Time_Period, unsigned int ID, int Act_1, int Act_2, int Act_3, int Act_4, int Act_5, int IO_1, int IO_2, int IO_3);
int		Msg_Prot_Unpack_Machine_Status_Request(ONS_BYTE* Msg_Buff, Status_Reply_Mode_t* Reply_Mode, int* Time_Period, unsigned int* ID, int* Act_1, int* Act_2, int* Act_3, int* Act_4, int* Act_5, int* IO_1, int* IO_2, int* IO_3);

int		Msg_Prot_Pack_n_Tx_Machine_Status_Reply(int M_S_Msg_ID, int Act_1, int Act_2, int Act_3, int Act_4, int Act_5, int IO_1, int IO_2, int IO_3, int Servo_Ind);
int		Msg_Prot_Unpack_Machine_Status_Reply(ONS_BYTE* Msg_Buff, int* M_S_Msg_ID, int* Act_1, int* Act_2, int* Act_3, int* Act_4, int* Act_5, int* IO_1, int* IO_2, int* IO_3, int* Servo_Ind);

// Machine Info
int		Msg_Prot_Pack_n_Tx_Machine_Info_Request(Status_Reply_Mode_t Reply_Mode, int Time_Period, unsigned int ID);
int		Msg_Prot_Unpack_Machine_Info_Request(ONS_BYTE* Msg_Buff, Status_Reply_Mode_t* Reply_Mode, int* Time_Period, unsigned int* ID);

int		Msg_Prot_Pack_n_Tx_Machine_Info_Reply(int M_S_Msg_ID, int Spool_Counters_Status, unsigned int Bobbin_Counter_Value, unsigned int Winder_Counter_Value, unsigned int Thread_Counter_Value, int Tension_Value, int Bobbin_Changer_Status, int Bobbin_Changer_Error_Code, int Bobbin_Changer_Step, int Z_Servo_Pos);
int		Msg_Prot_Unpack_Machine_Info_Reply(ONS_BYTE* Msg_Buff, int* M_S_Msg_ID, int* Spool_Couters_Status, int* Bobbin_Couter_Value, int* Winder_Couter_Value, int* Thread_Couter_Value, int* Tension_Value, int* Bobbin_Changer_Status, int*Bobbin_Changer_Error_Code, int*Bobbin_Changer_Step, int* Z_Servo_Pos);

// TTS Status
int		Msg_Prot_Pack_n_Tx_TTS_Status_Request(Status_Reply_Mode_t Reply_Mode, int Time_Period, unsigned int ID );
int		Msg_Prot_Unpack_TTS_Status_Request(ONS_BYTE* Msg_Buff, Status_Reply_Mode_t* Reply_Mode, int* Time_Period, unsigned int* ID);

int		Msg_Prot_Pack_n_Tx_TTS_Status_Reply(int M_S_Msg_ID, int Act_1 , int Act_2 , int IO_1 );
int		Msg_Prot_Unpack_TTS_Status_Reply(ONS_BYTE* Msg_Buff, int* M_S_Msg_ID, int* Act_1 ,int* Act_2 , int* IO_1 );

// Profile request
int		Msg_Prot_Pack_n_Tx_Profile_Info_Req(void);
int		Msg_Prot_Pack_n_Tx_Profile_Info(int Profile_Number, int* Info);
int		Msg_Prot_Unpack_Profile_Info(ONS_BYTE* Msg_Buff, int* Profile_Num, INT_16* Info);

// APF
int		Msg_Prot_Pack_n_Tx_APF_Set_Position_Request(ONS_Up_Down_State_t PF_Pos, int APF_Value);
int		Msg_Prot_Unpack_APF_Set_Position_Request(ONS_BYTE* Msg_Buff, ONS_Up_Down_State_t* APF_Pos, int* value);

// Manual Cut
int	Msg_Prot_Pack_n_Tx_Manual_Cut_Req(void);

//QUICK STOP
int	Msg_Prot_Pack_n_Tx_Quick_stop(void);

// Update Dry Run Speed Delay
int 	Msg_Prot_Pack_n_Tx_RTC_DR_Delay_Update(unsigned int Delay);
int 	Msg_Prot_Unpack_RTC_DR_Delay_Update(ONS_BYTE* Msg_Buff, unsigned int *Delay);

//ALARMS

int		Msg_Prot_Pack_n_Tx_Alarm_Info(int Alarm_State);
int		Msg_Prot_Unpack_Alarm_Info(ONS_BYTE* Msg_Buff, int* Alarm_State);

int		Msg_Prot_Pack_n_Tx_Reset_Alarm_Req(int Alarm_Mask);
int		Msg_Prot_Unpack_Reset_Alarm_Req(ONS_BYTE* Msg_Buff, int* Alarm_Mask);

int		Msg_Prot_Pack_n_Tx_Set_Alarm_Enable_State_Req(int Enable, int Alarm_Mask);
int		Msg_Prot_Unpack_Set_Alarm_Enable_State_Req(ONS_BYTE* Msg_Buff, int* Enable, int* Alarm_Mask);

//Entity
int		Msg_Prot_Pack_n_Tx_Entity_Get_State(int Entity_Id);
int		Msg_Prot_Unpack_Entity_Get_State(ONS_BYTE* Msg_Buff,int* Entity_Id);

int		Msg_Prot_Pack_n_Tx_Entity_Set_Cmd(Msg_Prot_Entity_List_t Entity);
int		Msg_Prot_Unpack_Entity_Set_Cmd(ONS_BYTE* Msg_Buff, Msg_Prot_Entity_List_t* Entity);

int		Msg_Prot_Pack_n_Tx_Entity_State(Msg_Prot_Entity_Data_t Entity_Info);
int		Msg_Prot_Unpack_Entity_State(ONS_BYTE* Msg_Buff, Msg_Prot_Entity_Data_t* Entity_Info);

//Tension
int		Msg_Prot_Pack_n_Tx_Set_Tention_Req(int Value);
int		Msg_Prot_Unpack_Set_Tention_Req(ONS_BYTE* Msg_Buff, int* Value);

//Set RTC Position
int		Msg_Prot_Pack_n_Tx_Load_RTC_To_XY_Position( int X_Position, int Y_Position);
int		Msg_Prot_Unpack_Load_RTC_To_XY_Position(ONS_BYTE* Msg_Buff, int*  X_Position, int* Y_Position);

int		Msg_Prot_Pack_n_Tx_Load_RTC_To_XY_Position_Response(ONS_Load_XY_Pos_State_t State);
int		Msg_Prot_Unpack_Load_RTC_To_XY_Position_Response(ONS_BYTE* Msg_Buff, INT_16* State);

//Set Servo Clamp Mode
int		Msg_Prot_Pack_n_Tx_Set_Servo_Clamp_Cmd(ONS_Servo_Clamp_Mode_t Mode, int Level);
int		Msg_Prot_Unpack_Set_Servo_Clamp_Cmd(ONS_BYTE* Msg_Buff, ONS_Servo_Clamp_Mode_t* Mode, int* Level);

//Set RTC Configuration Data
int		Msg_Prot_Pack_n_Tx_Set_RTC_Run_Time_Config_Data(int Air_Pressure_Enable, int TB_Enable, int Wiper_Enable, int Pallet_Enable, int APF_Error_Check_Enable);
int		Msg_Prot_Unpack_Set_RTC_Run_Time_Config_Data(ONS_BYTE* Msg_Buff, int* RTC_Config);

// RTC IO List Message
int 	Msg_Prot_Pack_n_Tx_Init_RTC_IO_List(char Start, char End, unsigned char* IO_Num);
int  	Msg_Prot_Unpack_IO_Init_RTC_IO_List(ONS_BYTE* Msg_Buff,  char* Start, char* End, unsigned char* IO_Num);


int		Msg_Prot_Pack_n_Tx_RTC_IO_List_Values(UINT_16 IO_List_Values_1, UINT_16 IO_List_Values_2, UINT_16 IO_List_Values_3, UINT_16 IO_List_Values_4, UINT_16 IO_List_Values_5, UINT_16 IO_List_Values_6, UINT_16 IO_List_Values_7, UINT_16 IO_List_Values_8);
int		Msg_Prot_Unpack_RTC_IO_List_Values(ONS_BYTE* Msg_Buff, UINT_16* IO_List_Values_1, UINT_16* IO_List_Values_2, UINT_16* IO_List_Values_3, UINT_16* IO_List_Values_4, UINT_16* IO_List_Values_5, UINT_16* IO_List_Values_6, UINT_16* IO_List_Values_7, UINT_16* IO_List_Values_8);

int		Msg_Prot_Pack_n_Tx_IO_List_Status_Request(Status_Reply_Mode_t Reply_Mode, int Time_Period);
int		Msg_Prot_Unpack_IO_List_Status_Request(ONS_BYTE* Msg_Buff, Status_Reply_Mode_t* Reply_Mode, int* Time_Period);

//LAMP Control
int		Msg_Prot_Pack_n_Tx_Set_Lamp_Cmd(Msg_Prot_Lamp_Command_t Command);
int		Msg_Prot_Unpack_Set_Lamp_Cmd(ONS_BYTE* Msg_Buff, Msg_Prot_Lamp_Command_t* Command);

//Spool Counters Command
int		Msg_Prot_Pack_n_Tx_Set_Spool_Counters_Cmd(Msg_Prot_Counter_Command_t Bobbin_Command, int Bobbin_Command_Value, Msg_Prot_Counter_Command_t Winder_Command, int Winder_Command_Value, Msg_Prot_Counter_Command_t Thread_Command, int Thread_Command_Value);
int		Msg_Prot_Unpack_Set_Spool_Counters_Cmd(ONS_BYTE* Msg_Buff, Spool_Countrs_Cmd_t* Bobbin_Counter, Spool_Countrs_Cmd_t* Winder_Counter, Spool_Countrs_Cmd_t* Thread_Counter);

//RPM Command
int		Msg_Prot_Pack_n_Tx_Set_RPM_Cmd(int RPM_Speed);
int		Msg_Prot_Unpack_Set_RPM_Cmd(ONS_BYTE* Msg_Buff, int* RPM_Speed);

//IO Latch Mode
int		Msg_Prot_Pack_n_Tx_Set_IO_Latch_Mode_Cmd(int Latch_Mode_Active);
int		Msg_Prot_Unpack_Set_IO_Latch_Mode_Cmd(ONS_BYTE* Msg_Buff, int* IO_Latch_Mode_Active);

//Move X Y Stitch
int		Msg_Prot_Pack_n_Tx_RTC_Move_X_Y_STC(int  X_Pos, int Y_pos, int Dt_X, int Dt_Y);
int		Msg_Prot_Unpack_RTC_Move_X_Y_STC(ONS_BYTE* Msg_Buff, int*  X_Pos, int* Y_Pos, int* Dt_X, int* Dt_Y);

//Bobbin Changer CMD
int		Msg_Prot_Pack_n_Tx_Bobbin_Changer_Cmd(Msg_Prot_Bobbin_Changer_Command_Code_t Command);
int		Msg_Prot_Unpack_Bobbin_Changer_Cmd(ONS_BYTE* Msg_Buff, Msg_Prot_Bobbin_Changer_Command_Code_t*  Command);

// Lock APF Pos
int		Msg_Prot_Pack_n_Tx_APF_Lock_State(Msg_Prot_APF_Lock_State State);
int		Msg_Prot_Unpack_APF_Lock_State(ONS_BYTE* Msg_Buff, Msg_Prot_APF_Lock_State* State);

//RTC Reset CMD
int		Msg_Prot_Pack_n_Tx_RTC_Reset_Cmd(void);

// Rotate SH to direction
int		Msg_Prot_Pack_n_Tx_Rotate_SH_to_Direction(int RPM, Msg_Prot_SH_Rotation_Direction_t Direction, int Distance);
int		Msg_Prot_Unpack_Rotate_SH_to_Direction(ONS_BYTE* Msg_Buff, int* RPM, Msg_Prot_SH_Rotation_Direction_t* Direction, int* Distance);

// DIAG ACT
//int     Msg_Prot_Pack_n_Tx_Diag_Act_Mode(Msg_Prot_Diag_Act_Mode_t Diag_Act_Mode, int Direction_Logic, int Sensor_Logic, int Move_Speed, int Move_Distance, int Move_To_Home_Axis_Timeout);
int	Msg_Prot_Pack_n_Tx_Diag_Act_Mode(Msg_Prot_Diag_Act_Mode_t Diag_Act_Mode, int Direction_Logic, int Move_Speed, int Move_Distance, int Move_To_Home_Axis_Timeout);
int     Msg_Prot_Unpack_Diag_Act_Mode(ONS_BYTE* Msg_Buff, Msg_Prot_Diag_Act_Mode_t* Diag_Act_Mode, int* Direction_Logic, int* Move_Speed, int* Move_Distance, int* Axis_Move_Timeout);

int     Msg_Prot_Pack_n_Tx_RTC_Diag_Act_Status(RTC_State_t	RTC_Diag_Act_Mode, int X_Pos, int Y_Pos, int XY_Moving, int Sew_Head_Rotating, RTC_Diag_Act_Result_t Diag_Act_Res, int Error_Code);
int  	Msg_Prot_Unpack_RTC_Diag_Act_Status(ONS_BYTE* Msg_Buff, RTC_State_t* RTC_Diag_Act_Mode, int* X_Pos, int* Y_Pos, int* XY_Moving, int* Sew_Head_Rotating, RTC_Diag_Act_Result_t* Diag_Act_Res, int* Error_Code);

int Msg_Prot_Pack_Entity_OneShot( int Entity_Id, int millisec );
int Msg_Prot_Unpack_Entity_OneShot_Fbk(ONS_BYTE* Msg_Buff, char* status );
#ifdef TESTING_MODE
unsigned long Msg_Prot_Get_Rx_Time(void);
#endif
// #ifdef __cplusplus
// }
// #endif
#endif
